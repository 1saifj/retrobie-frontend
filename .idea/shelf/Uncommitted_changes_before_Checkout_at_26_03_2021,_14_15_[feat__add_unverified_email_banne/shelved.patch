Index: src/components/internal/layout/index.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport styled from 'styled-components';\nimport Sidebar from '../../../pages/admin/sidebar';\nimport AuthenticatedMenu from '../../nav/AuthenticatedMenu';\nimport {Box as LayoutBox} from 'bloomer';\nimport {Anchor, BarChart2, Box, Flag, Home, Archive , Settings, Truck, Users} from 'react-feather';\nimport {ReactComponent as SidebarShoe} from '../../../assets/images/icons/shoe.svg';\n\n\nclass InternalLayout extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.props = props;\n    }\n\n    render() {\n        const sidebarItems = [\n            {\n                name: 'Dashboard',\n                icon: <Home color={\"#fff\"}/>,\n                route: '/company/admin/dashboard',\n            },\n            {\n                name: 'Orders',\n                icon: <Truck color={\"#fff\"}/>,\n                route: '/company/admin/dashboard/orders',\n            },\n            {\n                name: 'Analytics',\n                icon: <BarChart2 color={\"#fff\"}/>,\n                route: '/company/admin/dashboard/analytics',\n            },\n            {\n                name: 'Product Types',\n                icon: <Archive fill={\"#fff\"} style={{width: '24px', marginTop: 0}}/>,\n                route: '/company/admin/dashboard/product-types',\n            },\n            {\n                name: 'Products',\n                icon: <SidebarShoe fill={\"#fff\"} style={{width: '24px', marginTop: 0}}/>,\n                route: '/company/admin/dashboard/products',\n            },\n            {\n                name: 'Categories',\n                icon: <Flag color={'#fff'}/>,\n                route: '/company/admin/dashboard/categories'\n            },\n            {\n              name: 'Deliveries',\n              icon: <Truck color={\"#fff\"}/>,\n              route: '/company/admin/dashboard/deliveries'\n            },\n            {\n                name: 'Brands',\n                icon: <Box color={\"#fff\"}/>,\n                route: '/company/admin/dashboard/brands'\n            },\n            {\n                name: 'Users',\n                icon: <Users color={\"#fff\"}/>,\n                route: '/company/admin/dashboard/brands'\n            },\n            {\n                name: 'Misc',\n                icon: <Anchor color={\"#fff\"}/>,\n                route: '/company/admin/dashboard/misc',\n            },\n            {\n                name: 'Settings',\n                icon: <Settings color={\"#fff\"}/>,\n                route: '/company/admin/dashboard/settings',\n            },\n\n        ];\n        return (\n            <div className='layout--root'>\n\n                <div style={{display: 'flex', background: 'var(--color-primary)'}}>\n                    <Sidebar items={sidebarItems}/>\n\n                    <div style={{display: 'flex', flexDirection: 'column', width: '100%'}}>\n                        <AuthenticatedMenu/>\n\n                        <LayoutParent {...this.props} style={{...this.props.style}}>\n                            <div style={{width: '100%'}}>\n                                <LayoutBox style={{width: '100%', minHeight: '80vh'}}>\n                                    {this.props.children}\n                                </LayoutBox>\n                            </div>\n                        </LayoutParent>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst LayoutParent = styled.div`\n  padding: 32px;\n  background: #eeeeee;\n  height: 100%;\n`;\n\nexport default InternalLayout;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/internal/layout/index.jsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/components/internal/layout/index.jsx	(date 1616757221341)
@@ -33,7 +33,7 @@
             },
             {
                 name: 'Product Types',
-                icon: <Archive fill={"#fff"} style={{width: '24px', marginTop: 0}}/>,
+                icon: <Archive color={"#fff"} />,
                 route: '/company/admin/dashboard/product-types',
             },
             {
Index: src/hooks/useAuth/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import axios, {AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';\nimport {env} from '../../config';\nimport {logoutUserAction, refreshSessionAction} from '../../state/actions';\nimport {RootStateOrAny, useDispatch, useSelector} from 'react-redux';\nimport {UserState} from '../../state/reducers/userReducers';\nimport {AuthenticatedUser} from '../../types';\nimport jwtDecode from 'jwt-decode';\n\ntype TOTPRequestBody = {\n  email: string;\n  phoneNumber?: string;\n  purpose: 'verify-account' | 'reset-password';\n  clientStrategy: 'email' | 'sms' | 'api';\n};\n\nfunction isExpiredOrCloseToExpiry(token: string) {\n  const decoded: AuthenticatedUser = jwtDecode(token);\n  const expiryTime = decoded.exp * 1000;\n  return expiryTime < 0 || expiryTime - Date.now() < 60 * 1000;\n}\n\n// when we\nlet gettingTokenPromise = null;\n\n/**\n * This serves as a replacement for useApi.\n * <br/>\n *\n * NOTE: Non-idempotent requests (POST, PUT, etc) are thunks. GET requests are normal\n * async functions\n */\nconst useAuth = function () {\n  const dispatch = useDispatch();\n  const userState: UserState = useSelector((state: RootStateOrAny) => state.user);\n\n  /**\n   * Get a new access token\n   * @param expiredToken\n   * @param refreshToken\n   */\n  async function getFreshToken({expiredToken, refreshToken}): Promise<{accessToken: string}> {\n    // if there is no other request underway\n    if (gettingTokenPromise == null) {\n      // create and assign a new request\n      gettingTokenPromise = axios\n        .post(\n          `${env.getApiBaseUrl()}/auth/session/refresh`,\n          {\n            expiredToken,\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${refreshToken}`,\n            },\n          }\n        )\n        .then(({data}) => {\n          // set the\n          gettingTokenPromise = null;\n          dispatch(refreshSessionAction({accessToken: data.accessToken}));\n          return Promise.resolve(data);\n        })\n        .catch(err => {\n          gettingTokenPromise = null;\n          // todo?\n          throw err;\n        });\n    }\n\n    // otherwise, return the underway request\n    return gettingTokenPromise;\n  }\n\n  /**\n   * Returns the Bearer together with a fresh access\n   * token if the current one is almost stale.\n   */\n  async function getBearer(): Promise<string> {\n    if (userState.tokens) {\n      const {accessToken, refreshToken} = userState.tokens;\n      // if both the access token and refresh token are available in state\n      if (accessToken && refreshToken) {\n        if (isExpiredOrCloseToExpiry(accessToken)) {\n          // if (isExpiredOrCloseToExpiry(refreshToken)) {\n          //   // todo: logout\n          // }\n\n          // if the access token is expired or close to expiry\n          // get a new access token from the server\n          const {accessToken: newAccessToken} = await getFreshToken({\n            expiredToken: accessToken,\n            refreshToken,\n          });\n          return `Bearer ${newAccessToken}`;\n        } else {\n          return `Bearer ${accessToken}`;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  const getAxis: () => Promise<AxiosInstance> = async () => {\n    const bearer = await getBearer();\n    const axis = axios.create({\n      baseURL: env.getApiBaseUrl(),\n      headers: {\n        ...(bearer && {\n          Authorization: bearer,\n        }),\n      },\n    });\n    axis.interceptors.response.use(\n      value => value,\n      err => {\n        if (err.response?.status === 401) {\n          console.log('Got 401 error');\n        }\n        throw err;\n      }\n    );\n    return axis;\n  };\n\n  const orders = {\n    getAll: async () => (await getAxis()).get(`/orders/all`),\n    getSingle: async uuid => (await getAxis()).get(`/orders/${uuid}`),\n    new: data => async () => (await getAxis()).post('/orders/new', data),\n    mine: async params => (await getAxis()).get(`/orders/mine?include=${params}`),\n    checkStatus: async id => (await getAxis()).get(`/orders/${id}/status`),\n    complete: (data: {\n      orderId: string;\n      address: {latLng: [number, number]};\n      paymentType: 'pay-now' | 'pay-on-delivery';\n    }) => async () => (await getAxis()).post(`/orders/${data.orderId}/complete`, data),\n    cancel: async data => (await getAxis()).post(`/orders/${data.id}/cancel`),\n  };\n\n  const payments = {\n    initiateMpesaOnlinePayment: data => async () =>\n      (await getAxis()).post('/payments/mpesa/pay-online/initiate', data),\n  };\n\n  const imageKit = {\n    getSignature: () => async () => (await getAxis()).get(`/auth/imagekit/signature`),\n    upload: (data, config?: AxiosRequestConfig) => async () =>\n      axios.post('https://upload.imagekit.io/api/v1/files/upload', data, config),\n    delete: data => async () => axios.delete(`https://api.imagekit.io/v1/files/${data.fileId}`),\n  };\n\n  /**\n   * Use this to access all methods related to the '/brands' route\n   * @param name\n   * @return {{getSingle: (function(): Promise<AxiosResponse<*>>), getAll: (function(): Promise<AxiosResponse<*>>), get: (function(): Promise<AxiosResponse<*>>), create: (function(Object): Promise<AxiosResponse<*>>), updateImage: (function(*): Promise<AxiosResponse<any>>), getProducts: (function(): Promise<AxiosResponse<*>>)}}\n   */\n  const brands = {\n    /**\n     * Get all products\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    getAll: async () => (await getAxis()).get(`/brands/all`),\n    /**\n     * Get a single brand\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    getBrandBySlug: async ({slug}) => (await getAxis()).get(`/brands/${slug}`),\n    getBrandByUuid: async ({uuid}) => (await getAxis()).get(`/brands/${uuid}`),\n    /**\n     * Get a single brand's products\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    getProducts: async name => (await getAxis()).get(`/brands/${name}/products`),\n    getFilteredProducts: async ({slug}) =>\n      (await getAxis()).get(`/brands/${slug}/products/filtered`),\n    updateImage: uuid => async () => (await getAxis()).put(`/brands/images/${uuid}`),\n    /**\n     * Create a single brand\n     * @param {object}data\n     * @returns {Promise<AxiosResponse<any>>}\n     */\n    create: data => async () => (await getAxis()).post(`/brands/new`, data),\n  };\n\n  const category = {\n    getOne: async id => (await getAxis()).get(`/category/${id}`),\n    getAll: async () => (await getAxis()).get('/categories'),\n    create: data => async () => (await getAxis()).post('/categories', data),\n    update: (uuid, data) => async () => (await getAxis()).put(`/categories/${uuid}`, data),\n  };\n\n  const productTypes = {\n    create: data => async () => (await getAxis()).post('/product-type', data),\n  };\n\n  const products = {\n    getAll: async () => (await getAxis()).get('/products/all'),\n    getFeatured: async () => (await getAxis()).get('/products/popular'),\n    getSingle: async slug => (await getAxis()).get(`/products/${slug}`),\n    get: async slug => (await getAxis()).get(`/products/${slug}`),\n    create: data => async () => (await getAxis()).post('/products/new', data),\n    reIndex: data => async () => (await getAxis()).get(`/search/re-index/${data.index}`),\n    update: (id, data) => async () => (await getAxis()).put(`/products/${id}/update`, data),\n    deleteImage: async ({productId, fileId}) =>\n      (await getAxis()).delete(`/products/${productId}/image/${fileId}`),\n  };\n\n  const deliveries = {\n    getQuote: async data => (await getAxis()).post('/delivery/quote', data),\n    populate: () => async () => (await getAxis()).post('/delivery/locations/populate'),\n    getLocations: async ({q}: {q: string}) => (await getAxis()).get(`/delivery/locations?q=${q}`),\n  };\n\n  const accounts = {\n    register: data => async () => (await getAxis()).post('auth/register', data),\n    requestPasswordReset: data => async () =>\n      (await getAxis()).post('auth/request-password-reset', data),\n    requestTOTP: (data: TOTPRequestBody) => async () =>\n      (await getAxis()).post('auth/totp/request', data),\n    resetPassword: data => async () => (await getAxis()).post('auth/reset-password', data),\n    verify: data => async () => (await getAxis()).post('auth/verify-account', data),\n    me: async () => (await getAxis()).get('accounts/me'),\n    login: (data: {login: string; password: string}) => async () =>\n      (await getAxis()).post('auth/login', data),\n    logOut: (data: {accessToken: string; refreshToken: string}) => async dispatch => {\n      dispatch(logoutUserAction());\n      return (await getAxis()).post('/accounts/logout', data);\n    },\n    check: () => async () => (await getAxis()).get('auth/check'),\n    update: diff => async () => (await getAxis()).post('/accounts/me', diff),\n  };\n\n  const cart = {\n    fetch: async id => (await getAxis()).get(`carts/${id}`),\n    checkPaymentStatus: async id => (await getAxis()).get(`carts/${id}/payment-status`),\n  };\n\n  async function ping() {\n    return (await getAxis()).get('up');\n  }\n\n  return {\n    accounts,\n    brands,\n    cart,\n    category,\n    deliveries,\n    imageKit,\n    orders,\n    payments,\n    products,\n    productTypes,\n    ping,\n  };\n};\n\nexport default useAuth;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/hooks/useAuth/index.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/hooks/useAuth/index.tsx	(date 1616757236450)
@@ -96,6 +96,7 @@
           return `Bearer ${accessToken}`;
         }
       }
+      console.warn('Missing access or refresh token. Authenticated requests will not succeed.');
     }
 
     return undefined;
@@ -191,6 +192,7 @@
 
   const productTypes = {
     create: data => async () => (await getAxis()).post('/product-type', data),
+    getAll: async () => (await getAxis()).get('/product-type'),
   };
 
   const products = {
Index: src/pages/admin/sidebar.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport AnimatedLogo from '../../components/logo/AnimatedLogo';\nimport {useHistory} from 'react-router';\nimport {ChevronDown} from 'react-feather';\n\nconst Sidebar = props => {\n  const {items: sidebarItems} = props;\n  const history = useHistory();\n  const [currentActive, setCurrentActive] = useState(0);\n  const [sidebarRoutes, setSidebarRoutes] = useState(sidebarItems);\n\n  useEffect(() => {\n    const active = localStorage.getItem('sidebar_active');\n    if (active !== undefined) {\n      setCurrentActive(Number(active));\n      changeActiveItem(null, Number(active));\n    }\n  }, []);\n\n  function clearOtherSidebarItems(index) {\n    let clonedItems = [...sidebarRoutes];\n    clonedItems = clonedItems.map((item, itemIndex) => {\n      if (index !== itemIndex) item.isActive = false;\n      return item;\n    });\n    return clonedItems;\n  }\n\n  function changeActiveItem(item, index) {\n    if (item) history.push(item.route);\n\n    const clearedItems = clearOtherSidebarItems(index);\n    clearedItems[index].isActive = !clearedItems[index].isActive;\n    setSidebarRoutes(clearedItems);\n  }\n\n  return (\n    <>\n      <SidebarParent>\n        <div style={{position: 'fixed', background: 'inherit'}}>\n          <SidebarItem style={{margin: '8px 8px', background: 'var(--color-primary-dark)'}}>\n            <div\n              style={{\n                width: '100%',\n                padding: '4px 0',\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n              }}\n            >\n              <AnimatedLogo plain />\n              <ChevronDown color=\"#fff\" style={{width: 24, marginTop: 0}} />\n            </div>\n          </SidebarItem>\n\n          <ul>\n            {sidebarRoutes &&\n              sidebarRoutes.map((item, index) => {\n                return (\n                  <SidebarItem\n                    isActive={item.isActive}\n                    key={item.name}\n                    onClick={() => {\n                      changeActiveItem(item, index);\n                    }}\n                  >\n                    {item.icon}\n                    <p>{item.name}</p>\n                  </SidebarItem>\n                );\n              })}\n          </ul>\n        </div>\n        <div />\n      </SidebarParent>\n    </>\n  );\n};\n\nSidebar.propTypes = {\n  items: PropTypes.array.isRequired,\n};\n\nconst SidebarParent = styled.div`\n  max-width: 280px;\n  background: var(--color-primary);\n  & > div {\n    min-width: 200px;\n    height: 100vh;\n    width: 280px;\n  }\n\n  ul {\n    padding: 0 12px;\n  }\n\n  p {\n    color: #eeeeee;\n  }\n`;\n\nconst SidebarItem = styled.li<{isActive?: boolean}>`\n  padding: 4px 12px;\n  margin: 4px 8px;\n  border-radius: 4px;\n  list-style: none;\n  display: flex;\n  background: ${p => (p.isActive ? 'var(--color-primary-light)' : 'var(--color-primary)')};\n  transition: all 0.25s ease-in-out;\n  color: #fff6d1;\n  align-items: center;\n\n  &:hover {\n    cursor: pointer;\n    background: var(--color-primary-dark);\n  }\n\n  svg {\n    margin-right: 16px;\n    width: 20px;\n    transition: stroke 0.25s ease-in-out;\n    animation: ${p => (p.isActive ? 'col 1.5s linear 1' : 'none')};\n    animation-fill-mode: forwards;\n  }\n\n  @keyframes col {\n    25%,\n    100% {\n      stroke: #ffffff;\n    }\n  }\n`;\n\nexport default Sidebar;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pages/admin/sidebar.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/admin/sidebar.tsx	(date 1616757159956)
@@ -1,39 +1,50 @@
-import React, {useEffect, useState} from 'react';
+import React, {ReactElement, useEffect, useState} from 'react';
 import PropTypes from 'prop-types';
 import styled from 'styled-components';
 import AnimatedLogo from '../../components/logo/AnimatedLogo';
-import {useHistory} from 'react-router';
+import {useHistory, useLocation, useParams} from 'react-router';
 import {ChevronDown} from 'react-feather';
 
+type RouteItem = {
+  name: string;
+  route: string;
+  icon: ReactElement
+  isActive: boolean;
+}
+
 const Sidebar = props => {
   const {items: sidebarItems} = props;
   const history = useHistory();
   const [currentActive, setCurrentActive] = useState(0);
-  const [sidebarRoutes, setSidebarRoutes] = useState(sidebarItems);
+  const [sidebarRoutes, setSidebarRoutes] = useState<RouteItem[]>(sidebarItems);
 
   useEffect(() => {
-    const active = localStorage.getItem('sidebar_active');
-    if (active !== undefined) {
-      setCurrentActive(Number(active));
-      changeActiveItem(null, Number(active));
-    }
-  }, []);
+    setActiveItem()
+  }, [currentActive]);
 
-  function clearOtherSidebarItems(index) {
-    let clonedItems = [...sidebarRoutes];
-    clonedItems = clonedItems.map((item, itemIndex) => {
-      if (index !== itemIndex) item.isActive = false;
-      return item;
-    });
-    return clonedItems;
+  function changeActiveItem(item) {
+    if (item) {
+      history.push(item.route);
+      setActiveItem();
+    }
   }
-
-  function changeActiveItem(item, index) {
-    if (item) history.push(item.route);
 
-    const clearedItems = clearOtherSidebarItems(index);
-    clearedItems[index].isActive = !clearedItems[index].isActive;
-    setSidebarRoutes(clearedItems);
+  function setActiveItem(){
+    // first split the url using the string 'dashboard'
+    const locationWithoutDashboard = history.location.pathname.split('dashboard');
+    // and drop the first part of the array
+    locationWithoutDashboard.shift();
+    // then pick the only remaining item in the array
+    // and split it using the forward slash.
+    // the resulting array will contain an empty string and the name of the route eg. brands, categories, etc.
+    const activeSidebarItem = locationWithoutDashboard[0].split("/")[1]
+    // if there is no name, we're probably dealing with the dashboard
+    if (!activeSidebarItem){
+      setCurrentActive(0);
+    }else {
+      const activeSidebarIndex = sidebarRoutes.findIndex(item => item.name.toLowerCase() === activeSidebarItem.toLowerCase());
+      setCurrentActive(activeSidebarIndex);
+    }
   }
 
   return (
@@ -60,11 +71,9 @@
               sidebarRoutes.map((item, index) => {
                 return (
                   <SidebarItem
-                    isActive={item.isActive}
+                    isActive={currentActive === index}
                     key={item.name}
-                    onClick={() => {
-                      changeActiveItem(item, index);
-                    }}
+                    onClick={() => changeActiveItem(item)}
                   >
                     {item.icon}
                     <p>{item.name}</p>
Index: src/pages/admin/productTypes/AddProductType.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport {Form, Formik, FieldArray} from 'formik';\nimport styled from 'styled-components';\nimport {Button} from 'bloomer';\nimport * as Yup from 'yup';\nimport {MIN, REQUIRED} from '../validator/messages';\nimport {TextField} from '../../../components/input';\nimport {useAuth, useNotify} from '../../../hooks';\nimport {useDispatch} from 'react-redux';\nimport {extractErrorMessage} from '../../../helpers';\nimport {Trash} from 'react-feather';\n\nconst productTypeOptionValueSchema = Yup.object().shape({\n  value: Yup.string().required(REQUIRED),\n});\n\nconst ProductTypeOptionSchema = Yup.object().shape({\n  name: Yup.string().required(REQUIRED),\n  values: Yup.array().of(productTypeOptionValueSchema).min(1, MIN(1)),\n});\n\nconst AddProductTypeValidationSchema = Yup.object().shape({\n  name: Yup.string().required(REQUIRED).min(2, MIN(2)),\n  options: Yup.array().of(ProductTypeOptionSchema).min(1, MIN(1)),\n});\n\nexport default function AddProductType(props) {\n  const api = useAuth();\n  const dispatch = useDispatch();\n  const notify = useNotify();\n\n  return (\n    <AddProductTypeSyled>\n      <h2 style={{textAlign: 'center'}}>Create New Product Type</h2>\n\n      <Formik\n        initialValues={{\n          name: '',\n          options: [\n            {\n              name: '',\n              values: [{value: ''}],\n            },\n          ],\n        }}\n        onSubmit={async (submitValues, {setSubmitting}) => {\n          setSubmitting(true);\n\n          try {\n            await dispatch<any>(api.productTypes.create(submitValues));\n            notify.success(`Successfully created ${submitValues.name}`);\n          } catch (error) {\n            const message = extractErrorMessage(error);\n            notify.error(`Error: ${message}`);\n          }\n        }}\n        validationSchema={AddProductTypeValidationSchema}\n      >\n        {({values, isSubmitting, isValid}) => (\n          <Form className=\"product-type-form\">\n            <TextField\n              name=\"name\"\n              type=\"text\"\n              label=\"Product Type Name\"\n              placeholder=\"eg Sneakers\"\n            />\n            <h4>Product Type Options</h4>\n            <FieldArray name=\"options\">\n              {({remove, push}) => (\n                <>\n                  <div className=\"option-values\">\n                    {values.options.length > 0 &&\n                      values.options.map((_, index, optionsArray) => (\n                        <div key={index} className=\"option-values__parent\">\n                          <TextField\n                            name={`options.${index}.name`}\n                            type=\"text\"\n                            label=\"Option Name\"\n                            placeholder=\"eg Size\"\n                          />\n                          <h6>Option Values</h6>\n                          <FieldArray name={`options.${index}.values`}>\n                            {({remove, push}) => (\n                              <>\n                                <div className=\"option-values__wrapper\">\n                                  {values.options[index].values.length > 0 &&\n                                    values.options[index].values.map(\n                                      (_, valueIndex, valuesArray) => (\n                                        <div key={valueIndex} className=\"option-values__value\">\n                                          <div className=\"option-values__group\">\n                                            <TextField\n                                              name={`options.${index}.values.${valueIndex}.value`}\n                                              type=\"text\"\n                                              label=\"Value\"\n                                              placeholder=\"eg 42\"\n                                            />\n                                            <Button\n                                              isColor=\"danger\"\n                                              onClick={() => remove(valueIndex)}\n                                              disabled={valuesArray.length <= 1}\n                                            >\n                                              <Trash height=\"1.2rem\" />\n                                            </Button>\n                                          </div>\n                                        </div>\n                                      )\n                                    )}\n                                </div>\n                                <Button isColor=\"info\" onClick={() => push({value: ''})}>\n                                  Add Another Value\n                                </Button>\n                              </>\n                            )}\n                          </FieldArray>\n                          <Button\n                            disabled={optionsArray.length <= 1}\n                            isColor=\"danger\"\n                            onClick={() => remove(index)}\n                          >\n                            Delete This Option\n                          </Button>\n                        </div>\n                      ))}\n                  </div>\n                  <Button\n                    style={{width: '100%'}}\n                    isColor=\"info\"\n                    onClick={() => push({name: '', values: [{value: ''}]})}\n                  >\n                    Add New Option\n                  </Button>\n                </>\n              )}\n            </FieldArray>\n            <div>\n              <Button\n                style={{width: '100%'}}\n                isColor=\"primary\"\n                isLoading={isSubmitting}\n                disabled={isSubmitting || !isValid}\n                type=\"submit\"\n              >\n                Create Product Type\n              </Button>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </AddProductTypeSyled>\n  );\n}\n\nconst AddProductTypeSyled = styled.div`\n  .product-type-name {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .product-type-form {\n    button {\n      margin: 1rem;\n    }\n  }\n\n  .options-input {\n    width: 100%;\n  }\n\n  .option-values {\n    border: 1px solid black;\n    padding: 1rem;\n    margin-bottom: 1rem;\n\n    &__group {\n      display: grid;\n      grid-template-columns: 60% 1fr;\n      grid-template-rows: repeat(3, 2.25rem);\n      button {\n        margin: 0;\n        margin-left: 1rem;\n        grid-column: 2 / -1;\n        grid-row: 2 / span 1;\n      }\n    }\n\n    &__parent {\n      display: flex;\n      flex-direction: column;\n\n      & > .button {\n        margin 0.5rem 1rem;\n        width: 100%;\n        align-self: center;\n      }\n    }\n\n    &__wrapper {\n      display: flex;\n      justify-content: space-between;\n      flex-wrap: wrap;\n      border: 1px dashed var(--color-border-gray);\n      padding: 1rem;\n      margin-bottom: 1rem;\n\n      & > * {\n        margin: 0 1rem;\n        margin-bottom: 0.75rem;\n      }\n    }\n\n    &__value {\n      flex: 1 1 30%;\n    }\n  }\n`;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pages/admin/productTypes/AddProductType.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/admin/productTypes/AddProductType.tsx	(date 1616757201641)
@@ -3,7 +3,7 @@
 import styled from 'styled-components';
 import {Button} from 'bloomer';
 import * as Yup from 'yup';
-import {MIN, REQUIRED} from '../validator/messages';
+import {MIN, REQUIRED} from '../../../helpers/validationMessages';
 import {TextField} from '../../../components/input';
 import {useAuth, useNotify} from '../../../hooks';
 import {useDispatch} from 'react-redux';
@@ -31,152 +31,203 @@
 
   return (
     <AddProductTypeSyled>
-      <h2 style={{textAlign: 'center'}}>Create New Product Type</h2>
+      <h2>Create New Product Type</h2>
 
-      <Formik
-        initialValues={{
-          name: '',
-          options: [
-            {
-              name: '',
-              values: [{value: ''}],
-            },
-          ],
-        }}
-        onSubmit={async (submitValues, {setSubmitting}) => {
-          setSubmitting(true);
+      <div className="product-type-wrapper">
+        <Formik
+          initialValues={{
+            name: '',
+            options: [
+              {
+                name: '',
+                values: [{value: ''}],
+              },
+            ],
+          }}
+          onSubmit={async (submitValues, {setSubmitting}) => {
+            setSubmitting(true);
 
-          try {
-            await dispatch<any>(api.productTypes.create(submitValues));
-            notify.success(`Successfully created ${submitValues.name}`);
-          } catch (error) {
-            const message = extractErrorMessage(error);
-            notify.error(`Error: ${message}`);
-          }
-        }}
-        validationSchema={AddProductTypeValidationSchema}
-      >
-        {({values, isSubmitting, isValid}) => (
-          <Form className="product-type-form">
-            <TextField
-              name="name"
-              type="text"
-              label="Product Type Name"
-              placeholder="eg Sneakers"
-            />
-            <h4>Product Type Options</h4>
-            <FieldArray name="options">
-              {({remove, push}) => (
-                <>
-                  <div className="option-values">
-                    {values.options.length > 0 &&
-                      values.options.map((_, index, optionsArray) => (
-                        <div key={index} className="option-values__parent">
-                          <TextField
-                            name={`options.${index}.name`}
-                            type="text"
-                            label="Option Name"
-                            placeholder="eg Size"
-                          />
-                          <h6>Option Values</h6>
-                          <FieldArray name={`options.${index}.values`}>
-                            {({remove, push}) => (
-                              <>
-                                <div className="option-values__wrapper">
-                                  {values.options[index].values.length > 0 &&
-                                    values.options[index].values.map(
-                                      (_, valueIndex, valuesArray) => (
-                                        <div key={valueIndex} className="option-values__value">
-                                          <div className="option-values__group">
-                                            <TextField
-                                              name={`options.${index}.values.${valueIndex}.value`}
-                                              type="text"
-                                              label="Value"
-                                              placeholder="eg 42"
-                                            />
-                                            <Button
-                                              isColor="danger"
-                                              onClick={() => remove(valueIndex)}
-                                              disabled={valuesArray.length <= 1}
-                                            >
-                                              <Trash height="1.2rem" />
-                                            </Button>
-                                          </div>
-                                        </div>
-                                      )
-                                    )}
-                                </div>
-                                <Button isColor="info" onClick={() => push({value: ''})}>
-                                  Add Another Value
-                                </Button>
-                              </>
-                            )}
-                          </FieldArray>
-                          <Button
-                            disabled={optionsArray.length <= 1}
-                            isColor="danger"
-                            onClick={() => remove(index)}
-                          >
-                            Delete This Option
-                          </Button>
-                        </div>
-                      ))}
-                  </div>
-                  <Button
-                    style={{width: '100%'}}
-                    isColor="info"
-                    onClick={() => push({name: '', values: [{value: ''}]})}
-                  >
-                    Add New Option
-                  </Button>
-                </>
-              )}
-            </FieldArray>
-            <div>
-              <Button
-                style={{width: '100%'}}
-                isColor="primary"
-                isLoading={isSubmitting}
-                disabled={isSubmitting || !isValid}
-                type="submit"
-              >
-                Create Product Type
-              </Button>
-            </div>
-          </Form>
-        )}
-      </Formik>
+            try {
+              await dispatch<any>(api.productTypes.create(submitValues));
+              notify.success(`Successfully created ${submitValues.name}`);
+            } catch (error) {
+              const message = extractErrorMessage(error);
+              notify.error(`Error: ${message}`);
+            }
+          }}
+          validationSchema={AddProductTypeValidationSchema}
+        >
+          {({values, isSubmitting, isValid}) => (
+            <div className="product-type-form--wrapper">
+              <h4>Primary Details</h4>
+              <Form className="product-type-form">
+                <div className="product-type-form--name">
+                  <TextField
+                    name="name"
+                    type="text"
+                    label="Product Type Name"
+                    placeholder="eg Sneakers"
+                  />
+                </div>
+                <div className="product-type-form--options">
+                  <h4>Product Options</h4>
+                  <h5>A product type can have one or more multiple options</h5>
+                  <FieldArray name="options">
+                    {({remove, push}) => (
+                      <>
+                        <div className="option-values">
+                          {values.options.length > 0 &&
+                            values.options.map((_, index, optionsArray) => (
+                              <div key={index} className="option-values__parent">
+                                <h4>Option #{index + 1}</h4>
+                                <div className="option-values__subheading">
+                                  <h5>
+                                    A product option can have one or multiple values. e.g. Size 8,
+                                    Size 9; Color red, Color blue.
+                                  </h5>
+                                  <Button
+                                    className="is-tiny"
+                                    disabled={optionsArray.length <= 1}
+                                    isOutlined
+                                    isColor="dark"
+                                    onClick={() => remove(index)}
+                                  >
+                                    <Trash height="1.5rem" />
+                                  </Button>
+                                </div>
+
+                                <TextField
+                                  className="half-width"
+                                  name={`options.${index}.name`}
+                                  type="text"
+                                  label="Name"
+                                  placeholder="eg Size"
+                                />
+                                <FieldArray name={`options.${index}.values`}>
+                                  {({remove, push}) => (
+                                    <>
+                                      <div className="option-values__wrapper">
+                                        {values.options[index].values.length > 0 &&
+                                          values.options[index].values.map(
+                                            (_, valueIndex, valuesArray) => (
+                                              <div
+                                                key={valueIndex}
+                                                className="option-values__value"
+                                              >
+                                                <div className="option-values__group">
+                                                  <TextField
+                                                    name={`options.${index}.values.${valueIndex}.value`}
+                                                    type="text"
+                                                    label={`Value #${valueIndex + 1}`}
+                                                    placeholder="eg 42"
+                                                  />
+                                                  <Button
+                                                    isOutlined
+                                                    isColor="dark"
+                                                    className="is-tiny"
+                                                    onClick={() => remove(valueIndex)}
+                                                    disabled={valuesArray.length <= 1}
+                                                  >
+                                                    <Trash height="1.5rem" />
+                                                  </Button>
+                                                </div>
+                                              </div>
+                                            )
+                                          )}
+                                      </div>
+                                      <Button
+                                        isOutlined
+                                        isColor="dark"
+                                        onClick={() => push({value: ''})}
+                                      >
+                                        Add Value
+                                      </Button>
+                                    </>
+                                  )}
+                                </FieldArray>
+                              </div>
+                            ))}
+                        </div>
+                        <Button
+                          style={{width: '100%'}}
+                          isOutlined
+                          isColor="black"
+                          onClick={() => push({name: '', values: [{value: ''}]})}
+                        >
+                          Add New Option
+                        </Button>
+                      </>
+                    )}
+                  </FieldArray>
+                </div>
+                <div>
+                  <Button
+                    style={{width: '100%', marginTop: '1rem'}}
+                    isColor="primary"
+                    isLoading={isSubmitting}
+                    disabled={isSubmitting || !isValid}
+                    type="submit"
+                  >
+                    Submit
+                  </Button>
+                </div>
+              </Form>
+            </div>
+          )}
+        </Formik>
+      </div>
     </AddProductTypeSyled>
   );
 }
 
 const AddProductTypeSyled = styled.div`
+  .product-type {
+    &-wrapper {
+      border: var(--gray-thin-border);
+      padding: 2rem;
+    }
+
+    &-form {
+      &--wrapper {
+      }
+
+      &--name {
+        border: var(--gray-thin-border);
+        padding: 1rem;
+      }
+
+      &--options {
+        border: var(--gray-thin-border);
+        margin-top: 2rem;
+        padding: 1rem;
+      }
+    }
+  }
+
+  .input-half {
+    width: 50%;
+  }
+
   .product-type-name {
     display: flex;
     flex-direction: column;
   }
 
-  .product-type-form {
-    button {
-      margin: 1rem;
-    }
-  }
-
-  .options-input {
-    width: 100%;
-  }
-
   .option-values {
-    border: 1px solid black;
-    padding: 1rem;
-    margin-bottom: 1rem;
+    margin: 1rem 0;
+
+    &__subheading {
+      display: flex;
+      justify-content: space-between;
+      align-items: center;
+    }
 
     &__group {
       display: grid;
-      grid-template-columns: 60% 1fr;
+      grid-template-columns: minmax(75%, auto) 1fr;
       grid-template-rows: repeat(3, 2.25rem);
       button {
-        margin: 0;
+        margin: 0 auto;
         margin-left: 1rem;
         grid-column: 2 / -1;
         grid-row: 2 / span 1;
@@ -184,32 +235,22 @@
     }
 
     &__parent {
-      display: flex;
-      flex-direction: column;
+      border: var(--gray-thin-border);
+      padding: 1rem;
+      margin-bottom: 1rem;
 
       & > .button {
-        margin 0.5rem 1rem;
         width: 100%;
         align-self: center;
       }
     }
 
     &__wrapper {
-      display: flex;
-      justify-content: space-between;
-      flex-wrap: wrap;
-      border: 1px dashed var(--color-border-gray);
+      display: grid;
+      grid-template-columns: repeat(auto-fit, minmax(30vw, 1fr));
+      border: var(--gray-thin-border);
       padding: 1rem;
-      margin-bottom: 1rem;
-
-      & > * {
-        margin: 0 1rem;
-        margin-bottom: 0.75rem;
-      }
-    }
-
-    &__value {
-      flex: 1 1 30%;
+      margin: 1rem 0;
     }
   }
 `;
Index: src/pages/admin/validator/validator.jsx
===================================================================
--- src/pages/admin/validator/validator.jsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/admin/validator/validator.jsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
@@ -1,7 +0,0 @@
-import {newBrand} from './brand';
-
-export default {
-    brand: {
-        create: newBrand()
-    }
-}
Index: src/pages/admin/validator/messages.jsx
===================================================================
--- src/pages/admin/validator/messages.jsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/admin/validator/messages.jsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
@@ -1,14 +0,0 @@
-const MIN = (length) => `This field should be at least ${length} chars long`,
-    MAX = (length) => `This field should contain a max of ${length} chars`,
-    MIN_MAX = (min, max) => `This field should be between ${min} and ${max} chars long.`,
-    REQUIRED = "This field cannot be empty",
-    INVALID_URL = "Please provide a valid url";
-
-
-export {
-    REQUIRED,
-    MIN,
-    MAX,
-    MIN_MAX,
-    INVALID_URL
-};
Index: src/pages/admin/validator/brand.jsx
===================================================================
--- src/pages/admin/validator/brand.jsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/admin/validator/brand.jsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
@@ -1,23 +0,0 @@
-import * as Yup from 'yup';
-import {MAX, MIN, REQUIRED} from './messages';
-
-export function newBrand() {
-    return Yup.object().shape({
-        name: Yup.string()
-            .min(3, MIN(3))
-            .required(REQUIRED),
-        copy: Yup.string()
-            .min(80, MIN(80))
-            .max(180, MAX(180))
-            .required(REQUIRED),
-        short: Yup.string()
-            .max(80, MAX(80))
-            .required(REQUIRED),
-        long: Yup.string()
-            .min(120, MIN(120))
-            .required(REQUIRED),
-        featuredImage: Yup.object().required(REQUIRED),
-        logo: Yup.object().required(REQUIRED),
-        uuid: Yup.string().required(REQUIRED)
-    })
-}
Index: src/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport ReactDOM from 'react-dom';\n// import * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport configureStore from './state';\nimport Routes from './routes';\nimport {toast} from 'react-toastify';\nimport styled from 'styled-components';\nimport ScrollToTop from './components/ScrollToTop';\nimport {PersistGate} from 'redux-persist/integration/react';\nimport {FilterProviderV2} from './hooks/useFiltersV2';\nimport posthog from 'posthog-js';\nimport {env} from './config';\n\nrequire('react-hot-loader/patch');\n\ntoast.configure({\n    autoClose: 5000,\n    draggable: false,\n});\n\nif (env.isProduction()){\n  posthog.init('sI0h0X9GF-eLhMUhO1xvl998gfRStpLYm3dlVRDiFLQ', {\n    api_host: 'https://app.posthog.com',\n  });\n}\n\n\nconst Root = styled.div`\n  display: flex;\n  justify-content: center;\n  & > div {\n    width: 100%;\n  }\n`;\n\n\nconst render = Component => {\n\n    const {store, persistor} = configureStore();\n    return ReactDOM.render((\n      <Provider store={store}>\n        <FilterProviderV2>\n          <PersistGate loading={<p>Please wait...</p>} persistor={persistor}>\n            <Root>\n              <ScrollToTop/>\n              <Component/>\n            </Root>\n          </PersistGate>\n        </FilterProviderV2>\n      </Provider>\n    ), document.getElementById('root'));\n};\n\nrender(Routes);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.register();\n\n// @ts-ignore\nif (module.hot) {\n// @ts-ignore\n    module.hot.accept('./routes', () => {\n        const NextApp = require('./routes').default;\n        render(NextApp);\n    })\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/index.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/index.tsx	(date 1616757159396)
@@ -19,7 +19,9 @@
     draggable: false,
 });
 
-if (env.isProduction()){
+// Make sure to check the current environment is not staging
+// Vercel/React at times erroneously injects the 'production' key into NODE_ENV
+if (env.isProduction() && !env.isStaging()){
   posthog.init('sI0h0X9GF-eLhMUhO1xvl998gfRStpLYm3dlVRDiFLQ', {
     api_host: 'https://app.posthog.com',
   });
Index: src/types/index.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { UserInfoType } from '../state/reducers/userReducers';\n\nexport type DescriptionType = {\n  long: string\n  short: string\n  seo: string\n}\n\nexport type ProductType = {\n  name: string;\n  originalPrice: number;\n  slug: string;\n  price: number;\n  inStock: number;\n  uuid: string;\n  brands?: Array<BrandType>\n  images?: Array<ImageType>;\n  isOnOffer: boolean;\n  detail?: ProductDetailType;\n  meta?: ProductMetaType\n  description?: DescriptionType\n  currency?: string\n  adminProduct?: {\n    inStock: number\n  }\n};\n\n// This is the ProductType as represented/provided\n// by Meilisearch\nexport type FilteredProduct = {\n  price: number,\n  sex: \"M\" | \"F\",\n  size: number,\n  style: string,\n  slug: string,\n  isInStock: boolean\n  condition: string,\n  uuid: string\n  url: string,\n  name: string\n  thumbnailUrl: string\n  brands?: BrandType,\n  description?: string\n}\n\ntype ProductDetailType = {\n  size: number;\n  sizeCountry: string;\n  sex: \"M\" | \"F\";\n  primaryColor?: string\n  secondaryColor?: string\n}\n\ntype ProductMetaType = {\n  style: string;\n  condition: string;\n}\n\nexport type ImageType = {\n  fileId?: string\n  url: string;\n  thumbnailUrl: string;\n};\n\nexport type CartType = {\n  id: string;\n  total: number;\n  count: number;\n  items: Array<CartItemType>;\n};\n\nexport type ServerCartType = {\n  id?: number;\n  uuid: string;\n  total: number;\n  count: number;\n  cartItems: Array<CartItemType>;\n};\n\nexport type PromiseThunk<T> = (payload) => Promise<T>\n\nexport type AddressType = {\n  latLng?: [number, number]\n  placeId?: string\n  location?: string;\n  lat: number;\n  lng: number;\n}\n\nexport interface CategoryType {\n  name: string;\n  slug: string;\n  uuid: string;\n  landingImage: ImageType\n  description: string\n  products?: Array<ProductType>\n}\n\nexport interface BrandType {\n  uuid: string;\n  name: string\n  slug: string\n  logo: ImageType\n  description?: DescriptionType\n}\n\nexport type DeliveryType = {\n  address: AddressType;\n  cost: number;\n  courierOrderNo?: string\n}\n\nexport interface CheckoutType extends CartType {\n  delivery: DeliveryType\n  meta?: {\n    zoomLevel?: number\n  }\n}\n\nexport interface CartItemType extends ProductType {\n  name?: never;\n  productName: string;\n  quantity: number;\n  price: number;\n  inStock: number;\n  uuid?: string;\n  productId: string;\n  thumbnailUrl: string;\n  parentProduct?: ProductType;\n}\n\nexport type OrderStatus = 'incomplete' |\n  'refunded' |\n  'refundedPartially' |\n  'declined' |\n  'disputed' |\n  'pendingPayment' |\n  'pendingConfirmation' |\n  'pendingDispatch' |\n  'inTransit' |\n  'delivered' |\n  'cancelled';\n\nexport type PaymentStatus = 'initiated' |\n  'processed' |\n  'cancelled' |\n  'errored'\n\nexport interface OrderType {\n  status: OrderStatus,\n  orderNo: string;\n  uuid: string;\n  cart: CartType;\n  products?: Array<ProductType>;\n  payment?: PaymentType\n  paymentType?: string\n  paymentMethod?: string\n  customer?: UserInfoType\n  delivery?: DeliveryType\n}\n\nexport interface PaymentType {\n\n}\n\nexport interface AuthenticatedUser {\n  tokenType: TokenType;\n  id: number;\n  username: string;\n  isVerified: boolean;\n  role: string;\n  tokenId: string;\n  iat: number;\n  exp: number;\n  aud: [string];\n  iss: string;\n  jti: string;\n  userId: string;\n}\n\nexport interface SchemaProps {\n  [key: string]: {\n    [key: string]: any;\n  };\n}\n\nexport type LoginResponseType = {\n  accessToken: string;\n  refreshToken: string;\n  avatar: ImageType;\n  isVerified: boolean\n  message?: string\n}\n\nexport type RoleType = 'ROLE_USER' | 'ROLE_ADMIN'\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/types/index.d.ts	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/types/index.d.ts	(date 1616757159484)
@@ -104,6 +104,23 @@
   description?: DescriptionType
 }
 
+export interface ProductTypeType {
+  uuid: string;
+  name: string;
+  options: ProductOption[]
+}
+
+export interface ProductOption {
+  uuid: string;
+  name: string;
+  values: ProductOptionValue[]
+}
+
+export interface ProductOptionValue {
+  uuid: string;
+  value: string
+}
+
 export type DeliveryType = {
   address: AddressType;
   cost: number;
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>## Code for [Retrobie](https://retrobie.com)\n\n## Project Setup\n\nBefore proceeding to setup the project, it is recommended to first of all install `nvm` and use it\nto manage your node versions. The project has an `.nvmrc` file that specifies the supported version\nof node to use.\n\n- Clone the project locally and checkout to the `development` branch\n- Run `nvm use` to ensure you use the correct version of node.\n  - _Optionally, you can set nvm to autorun `nvm use` in each folder with a `.nvmrc` file._\n    [Read more here](https://github.com/nvm-sh/nvm#deeper-shell-integration)\n- Run `npm install` to install all project dependencies\n- By default, the project runs on `development`, and thus requires a locally hosted backend, but if\n  you need to ping the staging backend, you can set `REACT_APP_ENV=staging` in your `.env` file.\n- You can now run the application by running `npm run start`\n\n## Testing\n\n- [ ] TODO\n\n## Styling\n\nThis project relies on [Bulma](https://bulma.io/documentation/) for base components,\nstyling, responsiveness, etc, and [Bloomer](bloomer.js.org/)\nto provide the React abstractions.\n\nIt also includes a `src/assets/global.scss` file where global styles\nare defined and imported.\n\n### Colours\nColours are generally defined as global variables in `global.scss`\nand should not be hard-coded in individual components.\n\nFor instance:\n```css\n:root {\n    --color-primary: #f40028;\n    --color-error: #ea0021;\n    --color-text: #2B292D;\n    --color-border-gray: #CBCBD6;\n}\n```\n\n- [ ] TODO\n\n## Deployment\n\n`development`, `master` and every new branch are deployed automatically\nto (Vercel)[https://vercel.com/retrobie].\n\n### sitemap.xml\nBefore each deployment, a script (`src/utils/generate-sitemap.js`)\nis run to generate a sitemap.\n\nIt reads a list of all routes from `src/routes/routes.json`. \n\nWhile it's not ideal to have different files defining our routes \n(i.e. `routes.json`, `routes.jsx`), it's currently the easiest way \n(without dealing with Babel complications) to keep the sitemap\nup-to-date.\n\nFor that reason, it's important to add any new (non-dynamic)\nroutes to `routes.json`\n\n- [ ] TODO\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- README.md	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ README.md	(date 1616757159080)
@@ -41,7 +41,6 @@
     --color-border-gray: #CBCBD6;
 }
 ```
-
 - [ ] TODO
 
 ## Deployment
@@ -63,4 +62,5 @@
 For that reason, it's important to add any new (non-dynamic)
 routes to `routes.json`
 
+
 - [ ] TODO
Index: src/assets/style/global.scss
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>:root {\n  --color-background: #FFFFFF;\n  --color-background--light: #fff;\n  --color-background--dark: #444;\n  --color-foreground: #111111;\n  --color-primary: #f40028;\n  --color-primary-light: #ea0021;\n  --color-primary-dark: #b80909;\n  //--color-primary-dark: #db0023;\n  --color-accent:#0081ff;\n  --color-secondary: #009238;\n  //--color-accent-light: $colorAccentLight;\n  //--color-accent-dark: $colorAccentDark;\n  --color-error: #ea0021;\n  --color-text: #2B292D;\n  --color-text-medium: #403E42;\n  --color-description: #58565B;\n  --color-description-light: #888888;\n  --color-description-pale: #666666;\n  --color-border-gray: #CBCBD6;\n  --color-border-lightgray: #E5E5E5;\n  --color-border-pale: #CCD1E2;\n  --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);\n  --cubic-bezier: all 0.3s cubic-bezier(.25, .8, .25, 1);\n  //--color-button: #3333FF;\n  //--color-button-hover: #3763FF;\n  //--color-button-active: #0E0EC7;\n  //--color-button-disabled: #9898FF;\n  //--color-button-sent: #08A258;\n  //--color-stroke: #A7A7B6;\n  //--color-shadow: rgba(0,0,0,.05);\n  //--color-error: #E85349;\n  //--color-divider: #EDEDF0;\n  //--color-logo-text: #1F222C;\n  //--color-logo-icon: #3333FF;\n  //--color-dropdown-desktop: #FFFFFF;\n  //--color-dropdown-mobile: #F5F5FF;\n  //--color-dropdown-link-hover: #F5F5FF;\n  //--color-transparent: rgb(255,255,255,0);\n  --color-box-shadow: rgba(0, 0, 0, 0.15);\n}\n\nhtml,\nbody,\ndiv,\nspan,\napplet,\nobject,\niframe,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\np,\nblockquote,\npre,\na,\nabbr,\nacronym,\naddress,\nbig,\ncite,\ncode,\ndel,\ndfn,\nem,\nimg,\nins,\nkbd,\nq,\ns,\nsamp,\nsmall,\nstrike,\nstrong,\nsub,\nsup,\ntt,\nvar,\nb,\nu,\ni,\ncenter,\ndl,\ndt,\ndd,\nol,\nul,\nli,\nfieldset,\nform,\nlabel,\nlegend,\ntable,\ncaption,\ntbody,\ntfoot,\nthead,\ntr,\nth,\ntd,\narticle,\naside,\ncanvas,\ndetails,\nembed,\nfigure,\nfigcaption,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\noutput,\nruby,\nsection,\nsummary,\ntime,\nmark,\naudio,\nvideo {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  vertical-align: baseline;\n  color: var(--color-text);\n}\n\n\n/* HTML5 display-role reset for older browsers */\n\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmenu,\nnav,\nsection {\n  display: block;\n}\n\nbody {\n  font-family: -apple-system, BlinkMacSystemFont, \"Myriad Pro\", \"Josefin Sans\", Arial, Helvetica, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  font-weight: 400;\n  line-height: normal;\n  // font grows 1px for every 100px of viewport width\n  // leading grows along with font,\n  // with an additional 0.1em + 0.5px per 100px of the viewport\n  //line-height: calc(1.1em + 0.5vw);\n  color: var(--color-text);\n  background-color: #fff;\n  -webkit-text-size-adjust: 100%;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  -webkit-font-feature-settings: \"pnum\";\n  font-feature-settings: \"pnum\";\n  font-variant-numeric: proportional-nums;\n}\n\nhtml {\n  font-size: 100%;\n}\n\nhtml, body, #root {\n  height: 100%;\n}\n\n\n/*16px*/\n\nh1 {\n  font-size: 2.074em;\n  margin: .67em 0;\n}\n\nh2 {\n  font-size: 1.728em;\n  margin: .75em 0\n}\n\nh3 {\n  font-size: 1.44em;\n  margin: .83em 0\n}\n\nh4 {\n  font-size: 1.14em;\n  margin: .90em 0\n}\n\nh5 {\n  font-size: 0.9em;\n  margin: 0.35rem 0\n}\n\nh6 {\n  font-size: 0.8em;\n  margin: 1.67em 0\n}\n\np,\na,\nli {\n  font-size: 1rem;\n  margin: .43em 0;\n  line-height: 1.38rem;\n}\n\nsmall, small a {\n\n  font-size: 0.833em;\n  margin: 0;\n}\n\n@media screen and (max-width: 1024px) {\n  p {\n    font-size: 100%;\n  }\n  /*20px*/\n}\n\n\nblockquote,\nq {\n  quotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n  content: '';\n}\n\nblockquote {\n  position: relative;\n  padding-left: 1em;\n  border-left: 4px solid var(--primary-color-dark);\n  font-style: italic;\n  z-index: 1;\n\n  p {\n    color: var(--color-text);\n    font-weight: 300;\n  }\n\n  &:before,\n  &:after {\n    content: '\\\\201C';\n  }\n\n  &:after {\n    content: '\\\\201D';\n  }\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\na {\n  transition: all 0.25s ease-in-out;\n  margin: .3em 0;\n  text-decoration: none;\n\n  &:hover {\n    text-decoration: none;\n  }\n}\n\npre {\n  display: block;\n  padding: 2rem;\n  margin-top: 4rem;\n  overflow: auto;\n  font-size: 85%;\n  line-height: 1.45;\n  border-radius: 2px;\n  color: var(--color-text-accent);\n  border: 1px solid #fafafa;\n  font-family: \"SFMono-Regular\",\n  Consolas,\n  \"Liberation Mono\",\n  Menlo,\n  Courier,\n  monospace;\n}\n\nstrong {\n  font-weight: 600;\n}\n\nvideo {\n  max-width: 100%;\n}\n\nlabel, p.label {\n  color: var(--color-description);\n  font-size: 15px;\n  font-weight: 500;\n  display: block;\n  margin-bottom: 0.5em;\n  margin-top: 0.5em;\n}\n\np.help {\n  color: #666666;\n  margin: 4px 0 4px;\n}\n\n//https://codepen.io/aaroniker/pen/ZEYoxEY\n@supports (-webkit-appearance: none) or (-moz-appearance: none) {\n  input[type='checkbox'],\n  input[type='radio'] {\n    --active: var(--color-primary);\n    --active-inner: #fff;\n    --focus: 2px var(--color-primary-dark);\n    --border: #BBC1E1;\n    --border-hover: var(--color-accent);\n    --background: #fff;\n    --disabled: #F6F8FF;\n    --disabled-inner: #E1E6F9;\n    -webkit-appearance: none;\n    -moz-appearance: none;\n    height: 21px;\n    outline: none;\n    display: inline-block;\n    vertical-align: top;\n    position: relative;\n    margin: 0;\n    cursor: pointer;\n    border: 1px solid var(--bc, var(--border));\n    background: var(--b, var(--background));\n    -webkit-transition: background .3s, border-color .3s, box-shadow .2s;\n    transition: background .3s, border-color .3s, box-shadow .2s;\n  }\n  input[type='checkbox']:after,\n  input[type='radio']:after {\n    content: '';\n    display: block;\n    left: 0;\n    top: 0;\n    position: absolute;\n    -webkit-transition: opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);\n    transition: opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);\n    transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s);\n    transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);\n  }\n  input[type='checkbox']:checked,\n  input[type='radio']:checked {\n    --b: var(--active);\n    --bc: var(--active);\n    --d-o: .3s;\n    --d-t: .6s;\n    --d-t-e: cubic-bezier(.2, .85, .32, 1.2);\n  }\n  input[type='checkbox']:disabled,\n  input[type='radio']:disabled {\n    --b: var(--disabled);\n    cursor: not-allowed;\n    opacity: .9;\n  }\n  input[type='checkbox']:disabled:checked,\n  input[type='radio']:disabled:checked {\n    --b: var(--disabled-inner);\n    --bc: var(--border);\n  }\n  input[type='checkbox']:disabled + label,\n  input[type='radio']:disabled + label {\n    cursor: not-allowed;\n  }\n  input[type='checkbox']:hover:not(:checked):not(:disabled),\n  input[type='radio']:hover:not(:checked):not(:disabled) {\n    --bc: var(--border-hover);\n  }\n  input[type='checkbox']:focus,\n  input[type='radio']:focus {\n    box-shadow: 0 0 0 var(--focus);\n  }\n  input[type='checkbox']:not(.switch),\n  input[type='radio']:not(.switch) {\n    width: 21px;\n  }\n  input[type='checkbox']:not(.switch):after,\n  input[type='radio']:not(.switch):after {\n    opacity: var(--o, 0);\n  }\n  input[type='checkbox']:not(.switch):checked,\n  input[type='radio']:not(.switch):checked {\n    --o: 1;\n  }\n  input[type='checkbox'] + label,\n  input[type='radio'] + label {\n    line-height: 21px;\n    padding-top: 2px;\n    display: inline-block;\n    vertical-align: top;\n    cursor: pointer;\n    margin-left: 4px;\n    font-weight: 400;\n  }\n\n  input[type='checkbox']:not(.switch) {\n    border-radius: 7px;\n  }\n  input[type='checkbox']:not(.switch):after {\n    width: 5px;\n    height: 9px;\n    border: 2px solid var(--active-inner);\n    border-top: 0;\n    border-left: 0;\n    left: 7px;\n    top: 4px;\n    -webkit-transform: rotate(var(--r, 20deg));\n    transform: rotate(var(--r, 20deg));\n  }\n  input[type='checkbox']:not(.switch):checked {\n    --r: 43deg;\n  }\n  input[type='checkbox'].switch {\n    width: 38px;\n    border-radius: 11px;\n  }\n  input[type='checkbox'].switch:after {\n    left: 2px;\n    top: 2px;\n    border-radius: 50%;\n    width: 15px;\n    height: 15px;\n    background: var(--ab, var(--border));\n    -webkit-transform: translateX(var(--x, 0));\n    transform: translateX(var(--x, 0));\n  }\n  input[type='checkbox'].switch:checked {\n    --ab: var(--active-inner);\n    --x: 17px;\n  }\n  input[type='checkbox'].switch:disabled:not(:checked):after {\n    opacity: .6;\n  }\n\n  input[type='radio'] {\n    border-radius: 50%;\n  }\n  input[type='radio']:after {\n    width: 19px;\n    height: 19px;\n    border-radius: 50%;\n    background: var(--active-inner);\n    opacity: 0;\n    -webkit-transform: scale(var(--s, 0.7));\n    transform: scale(var(--s, 0.7));\n  }\n  input[type='radio']:checked {\n    --s: .5;\n  }\n}\n\n\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"tel\"],\ninput[type=\"password\"],\ninput[type=\"search\"],\ntextarea {\n  padding: 10px 16px;\n  border-radius: 4px;\n  min-height: 28px;\n\n  &::-webkit-input-placeholder {\n    font-size: 14px;\n    color: #ABABAB;\n  }\n\n  &::-moz-placeholder {\n    font-size: 14px;\n    color: #ABABAB;\n  }\n\n  &:-ms-input-placeholder {\n    font-size: 14px;\n    color: #ABABAB;\n  }\n\n  &::placeholder {\n    font-size: 14px;\n    color: #ABABAB;\n  }\n}\n\n.input, .textarea, .button {\n  border-width: 2px;\n  transition: all ease-in-out 0.25s;\n}\n\ninput.has-error, .has-error input {\n  border-color: var(--color-error);\n}\n\n.has-error .error {\n  padding: 8px;\n}\n\n.has-error .error small {\n  font-weight: bold;\n  color: var(--color-error);\n}\n\ntextarea {\n  font-size: 1.5rem;\n  min-height: 100px;\n  margin-top: 8px;\n}\n\ntextarea + textarea {\n  margin-bottom: 4px;\n}\n\nem {\n  font-style: italic;\n}\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  color: var(--color-text);\n  line-height: normal;\n  font-weight: 500;\n}\n\nul {\n  padding-left: 40px;\n  margin: 15px 0;\n  list-style: initial;\n}\n\nol {\n  margin-left: 16px;\n}\n\np,\nli {\n  color: var(--color-text);\n  font-family: var(--font-family-text)\n}\n\n\nsmall, small a {\n  color: #3E4756;\n  line-height: normal;\n}\n\nsmall + small {\n  margin: auto 2rem;\n}\n\nb {\n  font-weight: 600;\n}\n\n.mb1 {\n  margin-bottom: 1rem;\n}\n\n.mb2 {\n  margin-bottom: 2rem;\n}\n\n.fade-enter {\n  opacity: 1;\n}\n\n.fade-exit {\n  opacity: 1;\n}\n\n.fade-enter-active {\n  opacity: 1;\n}\n\n.fade-exit-active {\n  opacity: 0;\n}\n\n.fade-enter-active,\n.fade-exit-active {\n  transition: opacity 500ms;\n}\n\n\n.feather {\n  width: 24px;\n  height: 24px;\n  stroke: currentColor;\n  stroke-width: 2;\n  stroke-linecap: round;\n  stroke-linejoin: round;\n  fill: none;\n}\n\n.Toastify__toast-container {\n  width: unset;\n  min-width: 320px;\n  max-width: 420px;\n}\n\n.Toastify__toast {\n  border-radius: 4px !important;\n  padding: 0;\n  font-size: 0.85em;\n\n  .Toastify__toast-body {\n    font-family: \"Avenir\", sans-serif;\n\n    p {\n      font-size: 14px;\n    }\n  }\n}\n\n.accented {\n  color: var(--color-accent)\n}\n\n\n.section,\n.footer,\n.navbar {\n  max-width: 1800px;\n}\n\n.navbar {\n  max-height: 4rem;\n  background: var(--color-background--light);\n}\n\n.drawer-content {\n  scrollbar-width: none;\n}\n\n.navbar-burger, .navbar-close {\n  &:hover {\n    cursor: pointer;\n  }\n}\n\n.buttons .button {\n  margin: unset;\n}\n\n.buttons {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 12px;\n\n  button {\n    flex: 1 1 150px;\n  }\n}\n\n.button {\n  height: unset;\n  padding: 12px 32px;\n}\n\n.button.is-small {\n  font-size: 14px;\n  padding: 8px 24px;\n}\n\n.secondary {\n  color: var(--color-description);\n}\n\n.logo {\n  font-family: \"Josefin Sans\", sans-serif;\n  text-transform: uppercase;\n  font-size: 20px;\n}\n\n[data-badge]::after {\n  padding-top: 5px !important;\n  padding-left: 7px !important;\n  padding-bottom: 3px !important;\n}\n\n.notification.is-error {\n  background: #d80000;\n}\n\n.notification.is-info {\n  h4, p {\n    color: #FFFFFF;\n  }\n}\n\n.notification > .delete {\n  position: absolute;\n  right: 0.5rem;\n  top: 0.35rem !important;\n}\n\n.modal-content {\n  scrollbar-width: thin;\n}\n\n.progress::-webkit-progress-value, .progress::-moz-progress-bar {\n  transition: width 0.5s ease;\n}\n\n.react-select {\n  font-size: 14px;\n}\n\n.tabs {\n  li {\n    margin: 0;\n\n    a {\n      text-decoration: none;\n    }\n  }\n\n  ul {\n    padding: 0;\n  }\n}\n\n.fade-enter {\n  opacity: 1;\n}\n.fade-enter-active{\n  opacity: 1;\n}\n.fade-exit {\n  opacity: 0;\n}\n.fade-exit-active{\n  opacity: 0;\n}\n.fade-enter-active,\n.fade-exit-active {\n  transition: opacity 0.25ms ease-in-out;\n}\n\n\n.modal-content, .modal-card {\n  & > div {\n    padding: 48px;\n  }\n}\n\n@media screen and (max-width: 768px){\n  .modal-content, .modal-card {\n    width: 80%;\n\n    & > div {\n      padding: 24px;\n    }\n  }\n}\n\n.tippy-popper .tippy-tooltip.light-theme {\n  background-color: white !important;\n}\n\n.is-ghost {\n  border: none;\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  line-height: inherit;\n\n  &:hover {\n    border-bottom: 1px solid currentColor;\n  }\n}\n\n.alice-carousel__dots {\n  display: flex;\n  justify-content: center;\n}\n\n.product__filters {\n  display: flex;\n  gap: 64px;\n  flex-wrap: wrap;\n\n  @media screen and (max-width: 800px){\n    flex-direction: column;\n    gap: 32px;\n  }\n\n  .product__filters--desktop {\n    @media screen and (max-width: 800px){\n      display: none;\n    }\n  }\n\n  .product__filters--mobile {\n    display: none;\n    @media screen and (max-width: 800px){\n      display: block;\n    }\n  }\n\n  .product__filters--products-parent {\n    width: 100%;\n    flex: 1 0;\n\n    & > div {\n      display: grid;\n      column-gap: 24px;\n      row-gap: 72px;\n      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n      justify-content: space-between;\n    }\n  }\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/assets/style/global.scss	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/assets/style/global.scss	(date 1616757159220)
@@ -1,5 +1,5 @@
 :root {
-  --color-background: #FFFFFF;
+  --color-background: #ffffff;
   --color-background--light: #fff;
   --color-background--dark: #444;
   --color-foreground: #111111;
@@ -7,21 +7,21 @@
   --color-primary-light: #ea0021;
   --color-primary-dark: #b80909;
   //--color-primary-dark: #db0023;
-  --color-accent:#0081ff;
+  --color-accent: #0081ff;
   --color-secondary: #009238;
   //--color-accent-light: $colorAccentLight;
   //--color-accent-dark: $colorAccentDark;
   --color-error: #ea0021;
-  --color-text: #2B292D;
-  --color-text-medium: #403E42;
-  --color-description: #58565B;
+  --color-text: #2b292d;
+  --color-text-medium: #403e42;
+  --color-description: #58565b;
   --color-description-light: #888888;
   --color-description-pale: #666666;
-  --color-border-gray: #CBCBD6;
-  --color-border-lightgray: #E5E5E5;
-  --color-border-pale: #CCD1E2;
+  --color-border-gray: #cbcbd6;
+  --color-border-lightgray: #e5e5e5;
+  --color-border-pale: #ccd1e2;
   --box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
-  --cubic-bezier: all 0.3s cubic-bezier(.25, .8, .25, 1);
+  --cubic-bezier: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
   //--color-button: #3333FF;
   //--color-button-hover: #3763FF;
   //--color-button-active: #0E0EC7;
@@ -38,6 +38,7 @@
   //--color-dropdown-link-hover: #F5F5FF;
   //--color-transparent: rgb(255,255,255,0);
   --color-box-shadow: rgba(0, 0, 0, 0.15);
+  --gray-thin-border: 1px solid var(--color-border-gray);
 }
 
 html,
@@ -129,7 +130,6 @@
   color: var(--color-text);
 }
 
-
 /* HTML5 display-role reset for older browsers */
 
 article,
@@ -147,7 +147,8 @@
 }
 
 body {
-  font-family: -apple-system, BlinkMacSystemFont, "Myriad Pro", "Josefin Sans", Arial, Helvetica, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
+  font-family: -apple-system, BlinkMacSystemFont, 'Myriad Pro', 'Josefin Sans', Arial, Helvetica,
+    sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
   font-weight: 400;
   line-height: normal;
   // font grows 1px for every 100px of viewport width
@@ -160,8 +161,8 @@
   -webkit-font-smoothing: antialiased;
   -moz-osx-font-smoothing: grayscale;
   text-rendering: optimizeLegibility;
-  -webkit-font-feature-settings: "pnum";
-  font-feature-settings: "pnum";
+  -webkit-font-feature-settings: 'pnum';
+  font-feature-settings: 'pnum';
   font-variant-numeric: proportional-nums;
 }
 
@@ -169,53 +170,54 @@
   font-size: 100%;
 }
 
-html, body, #root {
+html,
+body,
+#root {
   height: 100%;
 }
 
-
 /*16px*/
 
 h1 {
   font-size: 2.074em;
-  margin: .67em 0;
+  margin: 0.67em 0;
 }
 
 h2 {
   font-size: 1.728em;
-  margin: .75em 0
+  margin: 0.75em 0;
 }
 
 h3 {
   font-size: 1.44em;
-  margin: .83em 0
+  margin: 0.83em 0;
 }
 
 h4 {
   font-size: 1.14em;
-  margin: .90em 0
+  margin: 0.9em 0;
 }
 
 h5 {
   font-size: 0.9em;
-  margin: 0.35rem 0
+  margin: 0.35rem 0;
 }
 
 h6 {
   font-size: 0.8em;
-  margin: 1.67em 0
+  margin: 1.67em 0;
 }
 
 p,
 a,
 li {
   font-size: 1rem;
-  margin: .43em 0;
+  margin: 0.43em 0;
   line-height: 1.38rem;
 }
 
-small, small a {
-
+small,
+small a {
   font-size: 0.833em;
   margin: 0;
 }
@@ -227,7 +229,6 @@
   /*20px*/
 }
 
-
 blockquote,
 q {
   quotes: none;
@@ -269,7 +270,7 @@
 
 a {
   transition: all 0.25s ease-in-out;
-  margin: .3em 0;
+  margin: 0.3em 0;
   text-decoration: none;
 
   &:hover {
@@ -287,12 +288,7 @@
   border-radius: 2px;
   color: var(--color-text-accent);
   border: 1px solid #fafafa;
-  font-family: "SFMono-Regular",
-  Consolas,
-  "Liberation Mono",
-  Menlo,
-  Courier,
-  monospace;
+  font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, Courier, monospace;
 }
 
 strong {
@@ -303,7 +299,8 @@
   max-width: 100%;
 }
 
-label, p.label {
+label,
+p.label {
   color: var(--color-description);
   font-size: 15px;
   font-weight: 500;
@@ -315,6 +312,7 @@
 p.help {
   color: #666666;
   margin: 4px 0 4px;
+  line-height: normal;
 }
 
 //https://codepen.io/aaroniker/pen/ZEYoxEY
@@ -324,11 +322,11 @@
     --active: var(--color-primary);
     --active-inner: #fff;
     --focus: 2px var(--color-primary-dark);
-    --border: #BBC1E1;
+    --border: #bbc1e1;
     --border-hover: var(--color-accent);
     --background: #fff;
-    --disabled: #F6F8FF;
-    --disabled-inner: #E1E6F9;
+    --disabled: #f6f8ff;
+    --disabled-inner: #e1e6f9;
     -webkit-appearance: none;
     -moz-appearance: none;
     height: 21px;
@@ -340,8 +338,8 @@
     cursor: pointer;
     border: 1px solid var(--bc, var(--border));
     background: var(--b, var(--background));
-    -webkit-transition: background .3s, border-color .3s, box-shadow .2s;
-    transition: background .3s, border-color .3s, box-shadow .2s;
+    -webkit-transition: background 0.3s, border-color 0.3s, box-shadow 0.2s;
+    transition: background 0.3s, border-color 0.3s, box-shadow 0.2s;
   }
   input[type='checkbox']:after,
   input[type='radio']:after {
@@ -350,24 +348,26 @@
     left: 0;
     top: 0;
     position: absolute;
-    -webkit-transition: opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
+    -webkit-transition: opacity var(--d-o, 0.2s),
+      -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
     transition: opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
     transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s);
-    transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s), -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
+    transition: transform var(--d-t, 0.3s) var(--d-t-e, ease), opacity var(--d-o, 0.2s),
+      -webkit-transform var(--d-t, 0.3s) var(--d-t-e, ease);
   }
   input[type='checkbox']:checked,
   input[type='radio']:checked {
     --b: var(--active);
     --bc: var(--active);
-    --d-o: .3s;
-    --d-t: .6s;
-    --d-t-e: cubic-bezier(.2, .85, .32, 1.2);
+    --d-o: 0.3s;
+    --d-t: 0.6s;
+    --d-t-e: cubic-bezier(0.2, 0.85, 0.32, 1.2);
   }
   input[type='checkbox']:disabled,
   input[type='radio']:disabled {
     --b: var(--disabled);
     cursor: not-allowed;
-    opacity: .9;
+    opacity: 0.9;
   }
   input[type='checkbox']:disabled:checked,
   input[type='radio']:disabled:checked {
@@ -445,7 +445,7 @@
     --x: 17px;
   }
   input[type='checkbox'].switch:disabled:not(:checked):after {
-    opacity: .6;
+    opacity: 0.6;
   }
 
   input[type='radio'] {
@@ -461,16 +461,15 @@
     transform: scale(var(--s, 0.7));
   }
   input[type='radio']:checked {
-    --s: .5;
+    --s: 0.5;
   }
 }
 
-
-input[type="text"],
-input[type="email"],
-input[type="tel"],
-input[type="password"],
-input[type="search"],
+input[type='text'],
+input[type='email'],
+input[type='tel'],
+input[type='password'],
+input[type='search'],
 textarea {
   padding: 10px 16px;
   border-radius: 4px;
@@ -478,31 +477,34 @@
 
   &::-webkit-input-placeholder {
     font-size: 14px;
-    color: #ABABAB;
+    color: #ababab;
   }
 
   &::-moz-placeholder {
     font-size: 14px;
-    color: #ABABAB;
+    color: #ababab;
   }
 
   &:-ms-input-placeholder {
     font-size: 14px;
-    color: #ABABAB;
+    color: #ababab;
   }
 
   &::placeholder {
     font-size: 14px;
-    color: #ABABAB;
+    color: #ababab;
   }
 }
 
-.input, .textarea, .button {
+.input,
+.textarea,
+.button {
   border-width: 2px;
   transition: all ease-in-out 0.25s;
 }
 
-input.has-error, .has-error input {
+input.has-error,
+.has-error input {
   border-color: var(--color-error);
 }
 
@@ -553,12 +555,12 @@
 p,
 li {
   color: var(--color-text);
-  font-family: var(--font-family-text)
+  font-family: var(--font-family-text);
 }
 
-
-small, small a {
-  color: #3E4756;
+small,
+small a {
+  color: #3e4756;
   line-height: normal;
 }
 
@@ -599,7 +601,6 @@
   transition: opacity 500ms;
 }
 
-
 .feather {
   width: 24px;
   height: 24px;
@@ -622,7 +623,7 @@
   font-size: 0.85em;
 
   .Toastify__toast-body {
-    font-family: "Avenir", sans-serif;
+    font-family: 'Avenir', sans-serif;
 
     p {
       font-size: 14px;
@@ -631,9 +632,8 @@
 }
 
 .accented {
-  color: var(--color-accent)
+  color: var(--color-accent);
 }
-
 
 .section,
 .footer,
@@ -650,7 +650,8 @@
   scrollbar-width: none;
 }
 
-.navbar-burger, .navbar-close {
+.navbar-burger,
+.navbar-close {
   &:hover {
     cursor: pointer;
   }
@@ -680,12 +681,17 @@
   padding: 8px 24px;
 }
 
+.button.is-tiny {
+  padding: 0.4rem;
+  width: 2.5rem;
+}
+
 .secondary {
   color: var(--color-description);
 }
 
 .logo {
-  font-family: "Josefin Sans", sans-serif;
+  font-family: 'Josefin Sans', sans-serif;
   text-transform: uppercase;
   font-size: 20px;
 }
@@ -701,8 +707,9 @@
 }
 
 .notification.is-info {
-  h4, p {
-    color: #FFFFFF;
+  h4,
+  p {
+    color: #ffffff;
   }
 }
 
@@ -716,7 +723,8 @@
   scrollbar-width: thin;
 }
 
-.progress::-webkit-progress-value, .progress::-moz-progress-bar {
+.progress::-webkit-progress-value,
+.progress::-moz-progress-bar {
   transition: width 0.5s ease;
 }
 
@@ -741,13 +749,13 @@
 .fade-enter {
   opacity: 1;
 }
-.fade-enter-active{
+.fade-enter-active {
   opacity: 1;
 }
 .fade-exit {
   opacity: 0;
 }
-.fade-exit-active{
+.fade-exit-active {
   opacity: 0;
 }
 .fade-enter-active,
@@ -755,15 +763,16 @@
   transition: opacity 0.25ms ease-in-out;
 }
 
-
-.modal-content, .modal-card {
+.modal-content,
+.modal-card {
   & > div {
-    padding: 48px;
+    padding: 12px;
   }
 }
 
-@media screen and (max-width: 768px){
-  .modal-content, .modal-card {
+@media screen and (max-width: 768px) {
+  .modal-content,
+  .modal-card {
     width: 80%;
 
     & > div {
@@ -798,20 +807,20 @@
   gap: 64px;
   flex-wrap: wrap;
 
-  @media screen and (max-width: 800px){
+  @media screen and (max-width: 800px) {
     flex-direction: column;
     gap: 32px;
   }
 
   .product__filters--desktop {
-    @media screen and (max-width: 800px){
+    @media screen and (max-width: 800px) {
       display: none;
     }
   }
 
   .product__filters--mobile {
     display: none;
-    @media screen and (max-width: 800px){
+    @media screen and (max-width: 800px) {
       display: block;
     }
   }
@@ -830,3 +839,6 @@
   }
 }
 
+.half-width {
+  width: 50%;
+}
Index: package-lock.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package-lock.json	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ package-lock.json	(date 1616757159160)
@@ -4112,6 +4112,15 @@
         "@types/react": "^16"
       }
     },
+    "@types/react-helmet": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/@types/react-helmet/-/react-helmet-6.1.0.tgz",
+      "integrity": "sha512-PYRoU1XJFOzQ3BHvWL1T8iDNbRjdMDJMT5hFmZKGbsq09kbSqJy61uwEpTrbTNWDopVphUT34zUSVLK9pjsgYQ==",
+      "dev": true,
+      "requires": {
+        "@types/react": "*"
+      }
+    },
     "@types/react-input-mask": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/@types/react-input-mask/-/react-input-mask-3.0.0.tgz",
Index: src/components/input/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export {default as TextField} from './TextField';\nexport {default as SelectField} from './SelectFieldV3';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/input/index.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/components/input/index.tsx	(date 1616757159344)
@@ -1,2 +1,3 @@
 export {default as TextField} from './TextField';
-export {default as SelectField} from './SelectFieldV3';
\ No newline at end of file
+export {default as SelectField} from './SelectFieldV3';
+export {default as CheckboxField} from './CheckboxField'
\ No newline at end of file
Index: src/components/input/SelectFieldV3.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport AsyncSelect from 'react-select/async';\nimport Select from 'react-select';\n\ntype OptionType = {\n  [key: string]: any\n};\n\n\n\nexport default function(\n  {\n    isAsync,\n    placeholder,\n    onChange,\n    isClearable,\n    loadingMessage,\n    disabled,\n    getOptionValue,\n    getOptionLabel,\n    loadOptions,\n    options,\n    filterOption,\n    error,\n    onBlur\n  }:\n  {\n    isAsync: boolean,\n    placeholder: string,\n    onChange: ({value, label}: OptionType)=> void,\n    isClearable?: boolean,\n    loadingMessage?: string,\n    disabled?: boolean,\n    getOptionValue?: (e: OptionType)=> string,\n    getOptionLabel?: (e: OptionType)=> string,\n    options?: Array<OptionType>,\n    loadOptions?: (inputValue: string)=> Promise<any>,\n    filterOption?: (option, rawInput)=> boolean,\n    error?: string,\n    onBlur?: (e: React.FocusEvent<HTMLInputElement>)=> void\n  }\n  ){\n\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      border: error && '2px solid var(--color-error)',\n      borderWidth: '2px'\n    }),\n  }\n\n\n  if (isAsync) {\n    return (\n      <div className={error && 'has-error'}>\n        <AsyncSelect\n          onBlur={onBlur}\n          styles={customStyles}\n          filterOption={filterOption}\n          getOptionLabel={getOptionLabel}\n          getOptionValue={getOptionValue}\n          isDisabled={disabled}\n          isClearable={isClearable}\n          loadingMessage={() => loadingMessage}\n          placeholder={placeholder}\n          loadOptions={loadOptions}\n          onChange={onChange}\n        />\n        <div className={'error'}>\n          <small>{error}</small>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={error &&'has-error'}>\n      <Select\n        onBlur={onBlur}\n        styles={customStyles}\n        filterOption={filterOption}\n        isDisabled={disabled}\n        getOptionValue={getOptionValue}\n        getOptionLabel={getOptionLabel}\n        isClearable={isClearable}\n        loadingMessage={() => loadingMessage}\n        onChange={onChange}\n        options={options}\n        placeholder={placeholder}\n      />\n      <div className={'error'}>\n        <small>{error}</small>\n      </div>\n    </div>\n  );\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/input/SelectFieldV3.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/components/input/SelectFieldV3.tsx	(date 1616757159320)
@@ -22,9 +22,11 @@
     options,
     filterOption,
     error,
-    onBlur
+    onBlur,
+    label
   }:
   {
+    label?: string
     isAsync: boolean,
     placeholder: string,
     onChange: ({value, label}: OptionType)=> void,
@@ -53,6 +55,7 @@
   if (isAsync) {
     return (
       <div className={error && 'has-error'}>
+        <label>{label}</label>
         <AsyncSelect
           onBlur={onBlur}
           styles={customStyles}
@@ -75,6 +78,7 @@
 
   return (
     <div className={error &&'has-error'}>
+      <label>{label}</label>
       <Select
         onBlur={onBlur}
         styles={customStyles}
Index: src/components/input/RadioField.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState} from 'react';\nimport styled from 'styled-components';\nimport {Radio} from 'bloomer';\n\nconst RadioParent = styled.div<{bordered?: boolean; selected?: boolean}>`\n  display: flex;\n  align-items: center;\n  border: ${\n  props =>\n    props.bordered && props.selected ? '2px solid var(--color-primary)' :\n      props.bordered ? '2px solid lightgray' : ''\n  };\n  border-radius: 2px;\n  padding: 8px 12px;\n  transition: all ease-in-out 0.25s;\n  \n  &:hover {\n    cursor:pointer;\n  }\n  \n  .radio {\n    display: flex;\n    align-items: center;\n  }\n  .radio span {\n    margin-left: 8px;\n  }\n`;\n\nconst RadioGroupParent = styled.div`\n  margin-top: 8px;\n  margin-bottom: 8px;\n  gap: 8px;\n  flex-wrap: wrap;\n\n  & > div {\n    flex: 1 1 100px;\n  }\n`\n\nexport default function RadioField(\n  {\n    onChange,\n    name,\n    bordered,\n    isGroup,\n    value,\n    inline,\n    options\n  }: {\n    onChange: Function,\n    name?: string,\n    bordered?: boolean,\n    isGroup?: boolean,\n    value?: string,\n    inline?: boolean,\n    options: Array<{label: string, value: string}>\n  }) {\n\n  const [selectedGroupItem, setSelectedGroupItem] = useState('');\n\n  if (!isGroup)\n    return (\n      <>\n        <RadioParent onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.value)}>\n          <Radio name={name} value={value} />\n        </RadioParent>\n      </>\n    );\n\n  return (\n    <>\n      <RadioGroupParent\n        style={{ display: inline ? 'flex' : 'block' }}\n      >\n        {\n          options?.map(item => (\n            <>\n              <div>\n                <RadioParent\n                  bordered={bordered}\n                  selected={selectedGroupItem === item.value}\n                  onClick={() => {\n                    setSelectedGroupItem(item.value);\n                    if (typeof onChange === 'function') {\n                      onChange(item.value);\n                    }\n                  }}\n                >\n                  <Radio\n                    name={name}\n                    value={item.value}\n                    readOnly\n                    checked={selectedGroupItem === item.value}\n                  >\n                    <span style={{ width: 'max-content' }}>{item.label}</span>\n                  </Radio>\n                </RadioParent>\n              </div>\n\n            </>\n          ))\n        }\n      </RadioGroupParent>\n    </>\n  )\n\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/input/RadioField.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/components/input/RadioField.tsx	(date 1616757159296)
@@ -1,6 +1,7 @@
 import React, {useState} from 'react';
 import styled from 'styled-components';
 import {Radio} from 'bloomer';
+import {useField} from 'formik';
 
 const RadioParent = styled.div<{bordered?: boolean; selected?: boolean}>`
   display: flex;
@@ -34,7 +35,7 @@
   flex-wrap: wrap;
 
   & > div {
-    flex: 1 1 100px;
+    flex: 1 1 50px;
   }
 `
 
@@ -48,7 +49,7 @@
     inline,
     options
   }: {
-    onChange: Function,
+    onChange?: (value: string, index?: number)=> void,
     name?: string,
     bordered?: boolean,
     isGroup?: boolean,
@@ -57,12 +58,18 @@
     options: Array<{label: string, value: string}>
   }) {
 
+  const [field] = useField(name);
+
   const [selectedGroupItem, setSelectedGroupItem] = useState('');
 
   if (!isGroup)
     return (
       <>
-        <RadioParent onChange={(e: React.ChangeEvent<HTMLInputElement>) => onChange(e.target.value)}>
+        <RadioParent
+          onChange={(e: React.ChangeEvent<HTMLInputElement>) => {
+              onChange?.(e.target.value)
+              field.onChange(e);
+            }}>
           <Radio name={name} value={value} />
         </RadioParent>
       </>
@@ -74,17 +81,24 @@
         style={{ display: inline ? 'flex' : 'block' }}
       >
         {
-          options?.map(item => (
+          options?.map((item, index) => (
             <>
               <div>
                 <RadioParent
                   bordered={bordered}
                   selected={selectedGroupItem === item.value}
-                  onClick={() => {
+                  onClick={(e) => {
                     setSelectedGroupItem(item.value);
                     if (typeof onChange === 'function') {
-                      onChange(item.value);
+                      onChange(item.value, index);
                     }
+                    field.onChange({
+                      ...e,
+                      target: {
+                        ...e.target,
+                        name
+                      }
+                    })
                   }}
                 >
                   <Radio
Index: src/pages/admin/products/modals/CreateVariantComponent.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pages/admin/products/modals/CreateVariantComponent.tsx	(date 1616757159456)
+++ src/pages/admin/products/modals/CreateVariantComponent.tsx	(date 1616757159456)
@@ -0,0 +1,133 @@
+import {FieldArray} from 'formik';
+import React, {useState} from 'react';
+import {capitalize} from '../../../../helpers';
+import {ProductOptionValue, ProductTypeType} from '../../../../types';
+import {CheckboxField, TextField} from '../../../../components/input';
+import {Column, Columns} from 'bloomer';
+import { Trash2 } from 'react-feather';
+import styled from 'styled-components';
+import RadioField from '../../../../components/input/RadioField';
+
+
+const CreateVariantComponent = (
+  {
+    allProductTypes,
+    selectedProductType,
+    onDeleteVariant,
+    index,
+  }: {
+    allProductTypes: ProductTypeType[],
+    selectedProductType: string,
+    onDeleteVariant: Function,
+    index: number
+  })=> {
+
+  if (!selectedProductType) return <span/>
+
+  return (
+    <VariantParent className="bordered">
+      <header>
+        <div>
+          <h4>Variant #{index + 1}</h4>
+        </div>
+        <div className="trash" onClick={()=> onDeleteVariant(index)}>
+          <Trash2/>
+        </div>
+      </header>
+      <Columns>
+        <Column>
+          <TextField
+            label={'Variant name'}
+            name={`variants.${index}.name`}
+            placeholder={'The name of this variant'}
+            type={'text'}
+          />
+        </Column>
+        <Column>
+          <TextField
+            label={'Stock count'}
+            name={`variants.${index}.inStock`}
+            placeholder={'e.g. 5'}
+            type={'number'}
+          />
+        </Column>
+      </Columns>
+      <Columns>
+        <Column>
+          <TextField
+            label={'Price'}
+            name={`variants.${index}.originalPrice`}
+            placeholder={'e.g. 5000'}
+            type={'number'}
+            help={"Leave this field blank if it costs the same as the product."}
+          />
+        </Column>
+        <Column>
+          <CheckboxField
+            label={'Is this variant on offer?'}
+            name={`variants.${index}.isOnOffer`}
+          />
+        </Column>
+      </Columns>
+      <FieldArray
+        name={`variants.${index}.options`}
+        render={(arrayHelpers)=> (
+          <div className="product-types">
+            {
+              allProductTypes
+                ?.find(type => type.uuid === selectedProductType)
+                ?.options.map((option, optionIndex) => (
+                <div className="bordered small product-type" key={option.uuid}>
+                  <div>
+                    <h4>
+                      {capitalize(option.name)}
+                    </h4>
+                    <div
+                      className="option">
+                      <RadioField
+                        name={`variants.${index}.options.${optionIndex}.value`}
+                        bordered={true}
+                        onChange={(value, index)=> arrayHelpers.replace(optionIndex, {
+                          name: option.name,
+                          uuid: option.uuid,
+                          value: {
+                            uuid: value,
+                            value: option.values[index].value
+                          }
+                        })}
+                        isGroup={true}
+                        inline={true}
+                        options={option.values.map((value, index) => ({
+                          value: value.uuid,
+                          label: capitalize(value.value)
+                        }))}
+                      />
+                    </div>
+                  </div>
+                </div>
+              ))
+            }
+          </div>
+        )}
+      />
+    </VariantParent>
+  );
+}
+
+export default CreateVariantComponent;
+
+const VariantParent = styled.div`
+  width: 100%;
+  header {
+   display: flex; 
+   align-items: center;
+   justify-content: space-between
+  }
+  
+  .trash {
+    &:hover {
+      cursor:pointer;
+      opacity: 0.8;
+    }
+  }
+`;
Index: src/components/input/CheckboxField.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/components/input/CheckboxField.tsx	(date 1616757159236)
+++ src/components/input/CheckboxField.tsx	(date 1616757159236)
@@ -0,0 +1,21 @@
+import React from 'react';
+import {useField} from 'formik';
+
+
+const CheckboxField = (props)=> {
+
+  const [field, meta, errors] = useField(props)
+
+  return (
+    <div>
+      <label>{props.label}</label>
+      <input
+        onChange={field.onChange}
+        name={props.name}
+        className="checkbox input"
+        type="checkbox" />
+    </div>
+  );
+}
+
+export default CheckboxField;
\ No newline at end of file
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"retrobie\",\n  \"version\": \"2.7.1\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@sentry/browser\": \"^5.27.4\",\n    \"@sentry/tracing\": \"^6.1.0\",\n    \"@tippyjs/react\": \"^4.2.0\",\n    \"@types/node\": \"^14.14.9\",\n    \"@types/react\": \"^16.14.1\",\n    \"@types/react-dom\": \"^16.9.10\",\n    \"axios\": \"^0.21.1\",\n    \"bloomer\": \"^0.6.5\",\n    \"bulma\": \"^0.8.2\",\n    \"bulma-badge\": \"^3.0.1\",\n    \"bulma-tooltip\": \"^3.0.2\",\n    \"downshift\": \"^6.0.6\",\n    \"eslint-loader\": \"^4.0.2\",\n    \"formik\": \"^2.2.5\",\n    \"formik-persist\": \"^1.1.0\",\n    \"jwt-decode\": \"^2.2.0\",\n    \"mapbox-gl\": \"^1.13.0\",\n    \"md5\": \"^2.3.0\",\n    \"mocker-data-generator\": \"^2.10.0\",\n    \"ms\": \"^2.1.2\",\n    \"node-sass\": \"^4.13.1\",\n    \"posthog-js\": \"^1.8.7\",\n    \"qs\": \"^6.9.4\",\n    \"rc-drawer\": \"^3.2.0\",\n    \"rc-progress\": \"^2.6.1\",\n    \"react\": \"^16.14.0\",\n    \"react-alice-carousel\": \"^2.2.1\",\n    \"react-autosuggest\": \"^10.0.3\",\n    \"react-avatar\": \"^3.9.7\",\n    \"react-circular-progressbar\": \"^2.0.3\",\n    \"react-color-extractor\": \"^1.1.2\",\n    \"react-dates\": \"^21.8.0\",\n    \"react-dom\": \"~16.13.1\",\n    \"react-feather\": \"^2.0.9\",\n    \"react-helmet\": \"^6.1.0\",\n    \"react-input-mask\": \"^2.0.4\",\n    \"react-progressive-graceful-image\": \"^0.6.12\",\n    \"react-query\": \"^1.5.10\",\n    \"react-quill\": \"^2.0.0-beta.2\",\n    \"react-redux\": \"^7.2.2\",\n    \"react-router\": \"^5.2.0\",\n    \"react-router-dom\": \"^5.2.0\",\n    \"react-router-hash-link\": \"^2.3.1\",\n    \"react-router-redux\": \"^5.0.0-alpha.9\",\n    \"react-router-to-array\": \"^0.1.3\",\n    \"react-schemaorg\": \"^1.2.0\",\n    \"react-scripts\": \"^4.0.1\",\n    \"react-select\": \"^3.1.0\",\n    \"react-tippy\": \"^1.4.0\",\n    \"react-toastify\": \"^6.1.0\",\n    \"react-transition-group\": \"^4.4.1\",\n    \"redux\": \"^4.0.4\",\n    \"redux-persist\": \"^6.0.0\",\n    \"redux-state-sync\": \"^3.1.2\",\n    \"redux-thunk\": \"^2.3.0\",\n    \"redux-tooltip\": \"^0.8.0\",\n    \"styled-components\": \"^5.2.1\",\n    \"swr\": \"^0.4.1\",\n    \"typescript\": \"^4.1.2\",\n    \"use-screen-size\": \"^1.1.0\",\n    \"uuid\": \"^7.0.3\",\n    \"yup\": \"^0.28.5\"\n  },\n  \"scripts\": {\n    \"prebuild\": \"npm run generate-sitemap\",\n    \"start\": \"PORT=7001 BROWSER=none react-scripts start\",\n    \"build\": \"DISABLE_NEW_JSX_TRANSFORM=true react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\",\n    \"generate-sitemap\": \"node src/utils/generate-sitemap\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  },\n  \"devDependencies\": {\n    \"@arkweid/lefthook\": \"^0.7.2\",\n    \"@types/mapbox-gl\": \"^2.0.0\",\n    \"@types/qs\": \"^6.9.5\",\n    \"@types/react-input-mask\": \"^3.0.0\",\n    \"@types/react-redux\": \"^7.1.11\",\n    \"@types/react-router-dom\": \"^5.1.6\",\n    \"@types/react-select\": \"^3.1.2\",\n    \"@types/react-transition-group\": \"^4.4.0\",\n    \"@types/redux-state-sync\": \"^3.1.1\",\n    \"@types/styled-components\": \"^5.1.7\",\n    \"@types/yup\": \"^0.29.9\",\n    \"dotenv\": \"^8.2.0\",\n    \"husky\": \"^4.3.0\",\n    \"node-sass\": \"^4.14.1\",\n    \"pretty-quick\": \"^2.0.2\",\n    \"prop-types\": \"^15.7.2\",\n    \"react-hot-loader\": \"^4.13.0\",\n    \"redux-devtools-extension\": \"^2.13.8\",\n    \"xml2json\": \"^0.12.0\"\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ package.json	(date 1616757159208)
@@ -93,6 +93,7 @@
     "@arkweid/lefthook": "^0.7.2",
     "@types/mapbox-gl": "^2.0.0",
     "@types/qs": "^6.9.5",
+    "@types/react-helmet": "^6.1.0",
     "@types/react-input-mask": "^3.0.0",
     "@types/react-redux": "^7.1.11",
     "@types/react-router-dom": "^5.1.6",
Index: src/pages/admin/products/SingleProduct.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState} from 'react';\nimport {axis, useAuth} from '../../../network';\nimport Loading from '../../../components/loading';\nimport styled from 'styled-components';\nimport {notify} from '../../../helpers/views';\nimport {Button, Column, Columns, Field} from 'bloomer';\nimport {Form, Formik} from 'formik';\nimport TextField from '../../../components/input/TextField';\nimport Select from 'react-select';\nimport CreatableSelect from 'react-select/creatable';\nimport OnOffSwitch from '../../../components/OnOffSwitch';\nimport Editor from '../brands/Editor';\nimport CustomImageUploader from '../../../components/upload/CustomImageUploader';\nimport SelectedImageModal from '../brands/modals/SelectedImageModal';\nimport * as Yup from 'yup';\nimport defaultHelpers, {\n  capitalize,\n  cleanString,\n  extractErrorMessage, slugify,\n} from '../../../helpers';\nimport {useDispatch} from 'react-redux';\nimport useSWR from 'swr/esm/use-swr';\nimport {deleteUploadedImageAction} from '../../../state/actions';\nimport {BrandType} from '../../../types';\n\nconst MESSAGES ={\n  REQUIRED: \"This field is required.\",\n  TOO_SHORT: \"This field is too short.\",\n  TOO_LONG: \"This field is too long.\"\n}\n\nconst UpdateProductValidationSchema = Yup.object().shape({\n  name: Yup.string().required(),\n  slug: Yup.string().required(),\n  uuid: Yup.string().required(),\n  short: Yup.string().required(),\n  long: Yup.string().required(),\n  seo: Yup.string().required(),\n  size: Yup.number().required(),\n  sizeCountry: Yup.string()\n    .oneOf(['UK', 'US', \"CHN\"])\n    .required(),\n  sex: Yup.string()\n    .oneOf(['M', 'F'])\n    .required(),\n  inStock: Yup.number()\n    .required(MESSAGES.REQUIRED)\n    .min(0),\n  inStockAdmin: Yup.number()\n    .required(MESSAGES.REQUIRED)\n    .min(0),\n  brand: Yup.string().required(),\n  currency: Yup.string().required(),\n  originalPrice: Yup.number().required(),\n  // idealFor: Yup.string().optional(),\n  style: Yup.string().required(),\n  condition: Yup.string().required(),\n  // endorsedBy: Yup.string().optional(),\n  // sportsType: Yup.string().optional(),\n});\n\nexport default function SingleProduct(props) {\n  const api = useAuth();\n  const dispatch = useDispatch();\n  const [showImageModal, setImageModalShown] = useState(false);\n  const [selectedImages, setSelectedImages] = useState([]);\n\n  const allBrandsFetcher = () => api.brands.getAll().then(({data}) => data);\n  const {data: allBrands} = useSWR<BrandType[]>('/brands/all', allBrandsFetcher);\n\n  const productSlug = props.match.params.slug;\n\n  const singleProductFetcher = (key, slug) => api.products.get(slug).then(({data}) => ({\n      name: data.name,\n      slug: data.slug,\n      uuid: data.uuid,\n      short: data.description.short,\n      long: data.description.long,\n      seo: data.description.seo,\n      size: data.detail.size,\n      sizeCountry: data.detail.sizeCountry,\n      sex: data.detail.sex,\n      inStock: data.inStock,\n      inStockAdmin: data.admin?.inStock,\n      brand: capitalize(data.brands[0].name),\n      images: data.images,\n      currency: 'Ksh.',\n      categories: data.categories,\n      originalPrice: data.originalPrice,\n      purchasePrice: data.purchasePrice,\n      productType: data.productType,\n      isOnOffer: data.isOnOffer,\n      idealFor: data.meta.idealFor,\n      style: data.meta.style,\n      condition: data.meta.condition,\n      endorsedBy: data.meta.endorsedBy,\n      sportsType: data.meta.sportsType,\n    }\n  ));\n  const {data: thisProductData, mutate} = useSWR([`/product/${productSlug}`, productSlug], singleProductFetcher);\n\n  if (!thisProductData) {\n    return (\n      <Loading message={'Please wait a while...'} />\n    )\n  }\n\n  const conditions = [\n    {\n      label: 'New',\n      value: 'new',\n    },\n    {\n      label: 'Refurbished',\n      value: 'refurbished',\n    },\n    {\n      label: 'Slightly Worn',\n      value: 'worn',\n    },\n  ];\n\n  function deleteProduct(id) {\n    if (!id) {\n      return;\n    }\n    axis\n      .delete(`/products/single/${id}`)\n      .then(response => {\n        notify('success', response.data.message);\n      })\n      .catch(err => {\n        notify('error', \"That didn't work out\");\n      });\n  }\n\n  return (\n    <div>\n      <div>\n        <Formik\n          validationSchema={UpdateProductValidationSchema}\n          initialValues={{\n            ...thisProductData,\n            sizeCountry: 'UK',\n          }}\n          onSubmit={async (values, {setFieldValue, setSubmitting}) => {\n            //fixme\n            setFieldValue('images', thisProductData.images);\n            // When updating a product, we only want to send details that have changed\n            // And ignore the rest\n            // Note: arrays always show up\n            let diff = defaultHelpers.objectDiff(thisProductData, values);\n            // Any new images?\n            let noNewImages = defaultHelpers.arraysEqual(thisProductData.images, values.images);\n            // Any new categories?\n            let noNewCategories = defaultHelpers.arraysEqual(\n              thisProductData.categories,\n              values.categories,\n            );\n\n            // Delete them from the object if they don't exist\n            if (noNewImages) {\n              delete diff.images;\n            }\n\n            if (noNewCategories) {\n              delete diff.categories;\n            }\n\n            if (!Object.keys(diff).length) {\n              notify('info', 'Nothing changed');\n              return;\n            }\n\n            try {\n              // @ts-ignore\n              const {data} = await dispatch(api.products.update(thisProductData.uuid, {\n                ...diff,\n                admin: {\n                  inStock: diff.inStockAdmin,\n                  purchasePrice: diff.purchasePrice\n                }\n              }));\n              // Delete the now uploaded images\n              dispatch(deleteUploadedImageAction({\n                uploaderId: 'retro-image-uploader-' + productSlug,\n              }));\n              await mutate(null, true);\n              notify('success', \"Updated product successfully.\");\n            } catch (e) {\n              console.error(e);\n              const message = extractErrorMessage(e);\n              notify('error', 'An error occurred. ' + message);\n            }\n\n            setSubmitting(false);\n          }}\n        >\n          {({setFieldValue, submitForm, isSubmitting, values}) => (\n            <Form>\n              <FormItemsParent>\n                <h3>Main Details</h3>\n                <div>\n                  <CustomImageUploader\n                    allowMultiple={true}\n                    id={productSlug}\n                    folder={`products/${slugify(thisProductData.brand, {lower: true})}/${slugify(values.name)}`}\n                    initialImages={values.images}\n                    onClickSelectedImage={images => {\n                      setImageModalShown(!showImageModal);\n                      setSelectedImages(images);\n                    }}\n                    onDeleteUploadedImage={async ({fileId}) => {\n                      try {\n                        await api.products.deleteImage({\n                          productId: thisProductData.uuid,\n                          fileId,\n                        });\n                        await mutate(null, true);\n                        notify('success', 'Image deleted');\n                      } catch (e) {\n                        const message = extractErrorMessage(e);\n                        notify('error', message);\n                      }\n                    }}\n                    onInit={images => setFieldValue('images', images)}\n                    onUpload={(err, {images: all}) => {\n                      notify('success', 'Image uploaded successfully.');\n                      if (err) {\n                        notify('error', 'Failed to upload one or more of your images');\n                        return;\n                      }\n                      setFieldValue('images', all);\n                    }}\n                  />\n                  <SelectedImageModal\n                    showModal={showImageModal}\n                    onClose={() => setImageModalShown(false)}\n                    images={selectedImages}\n                  />\n                </div>\n                <div>\n                  <h4>Primary Details</h4>\n                  <Columns>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <TextField\n                          type={'text'}\n                          label={'This product\\'s name '}\n                          placeholder={'Name'}\n                          name=\"name\"\n                        />\n                      </Field>\n                    </Column>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <label>\n                          This product's brand name\n                        </label>\n                        <Select\n                          placeholder=\"eg. Adidas\"\n                          options={allBrands?.map(item => ({\n                            label: capitalize(item.name),\n                            value: item.name,\n                          }))}\n                          isOptionSelected={\n                            ({value}) => value.toLowerCase() ===\n                              thisProductData.brand.toLowerCase()\n                          }\n                          defaultValue={thisProductData && {\n                            label: capitalize(thisProductData?.brand),\n                            value: thisProductData?.brand,\n                          }}\n                          onChange={({value}) => setFieldValue('brand', value)}\n                          type=\"text\"\n                          name=\"brand\" />\n                      </Field>\n                    </Column>\n                  </Columns>\n                </div>\n                <div>\n                  <Columns>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <TextField\n                          prefix={`https://retrobie.com/products/${values.brand}/`}\n                          type={'text'}\n                          disabled\n                          label={'This product\\'s slug'}\n                          placeholder={'eg. adidas-superstar'}\n                          name=\"slug\"\n                        />\n                      </Field>\n                    </Column>\n                  </Columns>\n                </div>\n                <Columns>\n                  <Column isSize={{desktop: '1/2'}}>\n                    <Field>\n                      <label>Product type</label>\n                      <Select\n                        defaultValue={\n                          values.productType && {\n                            value: values.productType,\n                            label: capitalize(values.productType),\n                          }\n                        }\n                        placeholder={'eg. Sneaker'}\n                        onChange={({value}) => setFieldValue('productType', value)}\n                        options={[\n                          {\n                            value: 'sneaker',\n                            label: 'Sneaker',\n                          },\n                        ]}\n                      />\n                    </Field>\n                  </Column>\n                  <Column isSize={{desktop: '1/2'}}>\n                    <Field>\n                      <label>Categories</label>\n                      <CreatableSelect\n                        isMulti={true}\n                        placeholder={'eg. Sneakers, Men\\'s shoes`'}\n                        onChange={values => {\n                          const categories = values.map(item => ({name: item.label}));\n                          setFieldValue('categories', categories);\n                        }}\n                        defaultValue={\n                          values.categories?.length &&\n                          values.categories?.map(item => {\n                            return {\n                              value: cleanString(item.name, '-'),\n                              label: item.name,\n                            };\n                          })\n                        }\n                        options={[\n                          {\n                            value: 'sneakers',\n                            label: 'Sneakers',\n                          },\n                          {\n                            value: 'mens-shoes',\n                            label: 'Men\\'s shoes',\n                          },\n                          {\n                            value: 'womens-shoes',\n                            label: 'Women\\'s shoes',\n                          },\n                          {\n                            value: 'popular',\n                            label: 'Popular shoes',\n                          },\n                        ]}\n                      />\n                    </Field>\n                  </Column>\n                </Columns>\n                <div>\n                  <TextField\n                    label={'Short description'}\n                    placeholder={'Short Description'}\n                    type={'text'}\n                    name={'short'}\n                  />\n                  <TextField\n                    placeholder={'seo'}\n                    type={'textarea'}\n                    rows={5}\n                    name={'seo'}\n                    label={'SEO description'}\n                    chars={150}\n                    componentClass=\"textarea\"\n                  />\n                  <Editor\n                    defaultValue={thisProductData.long}\n                    onChange={value => setFieldValue('long', value)}\n                    label={'Long description'}\n                    placeholder={'Long description'}\n                  />\n                </div>\n                <div>\n                  <h4>Price</h4>\n                  <Columns>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <TextField\n                        type={'text'}\n                        placeholder={'Currency'}\n                        name={'currency'}\n                        label={'Currency'}\n                        disabled\n                      />\n                    </Column>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <TextField\n                        placeholder={'eg. 5000'}\n                        type={'number'}\n                        label={'The current price of this product'}\n                        name={'originalPrice'}\n                      />\n                    </Column>\n                  </Columns>\n                </div>\n                <div style={{marginTop: 12}}>\n                  <h4>Stock</h4>\n                  <div>\n                    <Columns>\n                      <Column isSize={{desktop: '1/2'}}>\n                        <TextField\n                          label={'Users stock count'}\n                          placeholder={'eg. 25'}\n                          type={'number'}\n                          name={'inStock'}\n                        />\n                      </Column>\n                      <Column isSize={{desktop: '1/2'}}>\n                        <TextField\n                          label={'Admin stock count'}\n                          placeholder={'eg. 30'}\n                          type={'number'}\n                          name={'inStockAdmin'}\n                        />\n                      </Column>\n                    </Columns>\n                    <div>\n                      <Columns>\n                        <Column isSize={{desktop: '1/2'}}>\n                          <div>\n                            <OnOffSwitch\n                              label={'Is this product on offer?'}\n                              onText={''}\n                              offText={''}\n                              onChange={value => {\n                                setFieldValue('isOnOffer', value);\n                              }}\n                            />\n                          </div>\n                        </Column>\n                        <Column isSize={{desktop: '1/2'}}>\n                          <TextField\n                            disabled={!values.isOnOffer}\n                            placeholder={'Sale Price'}\n                            name={'salePrice'}\n                            type={'number'}\n                            label={'Sale Price'}\n                          />\n                        </Column>\n                      </Columns>\n                    </div>\n                  </div>\n                </div>\n                <div style={{marginTop: 24}}>\n                  <div>\n                    <h4>Misc</h4>\n                    <div>\n                      <Columns>\n                        <Column isSize={{desktop: '1/2'}}>\n                          <TextField\n                            placeholder={'Size'}\n                            type={'number'}\n                            label={'Size'}\n                            name={'size'}\n                          />\n                        </Column>\n                        <Column isSize={{desktop: '1/2'}}>\n                          <label>Are these shoes better suited for men or women?</label>\n                          <Select\n                            defaultValue={{\n                              value: 'M',\n                            }}\n                            value={\n                              values.sex && {\n                                label: values.sex === 'M' ? 'Men' : 'Women',\n                                value: values.sex,\n                              }\n                            }\n                            options={[\n                              {\n                                value: 'M',\n                                label: 'Men',\n                              },\n                              {\n                                value: 'F',\n                                label: 'Women',\n                              },\n                            ]}\n                            placeholder={'eg. Men or Women'}\n                            onChange={({value}) => setFieldValue('sex', value)}\n                          />\n                        </Column>\n                      </Columns>\n                    </div>\n                    <Columns>\n                      <Column isSize={{desktop: '1/2'}}>\n                        <div>\n                          <label>This product's current condition</label>\n                          <Select\n                            defaultValue={\n                              values.condition && {\n                                label: capitalize(values.condition),\n                                value: values.condition,\n                              }\n                            }\n                            placeholder=\"eg. New or Refurbished\"\n                            options={conditions}\n                            onChange={({value}) => setFieldValue('condition', value)}\n                          />\n                        </div>\n                      </Column>\n                      <Column isSize={{desktop: '1/2'}}>\n                        <label>Shoe style</label>\n                        <Select\n                          placeholder={'eg. Low Cut or High Cut'}\n                          defaultValue={\n                            values.style && {\n                              label: capitalize(values.style),\n                              value: values.style,\n                            }\n                          }\n                          options={[\n                            {\n                              label: 'High-cut',\n                              value: 'high-cut',\n                            },\n                            {\n                              label: 'Mid-cut',\n                              value: 'mid-cut',\n                            },\n                            {\n                              label: 'Low-cut',\n                              value: 'low-cut',\n                            },\n                          ]}\n                          onChange={style => setFieldValue('style', style.value)}\n                        />\n                      </Column>\n                    </Columns>\n                  </div>\n                </div>\n                {/*\n                  <div>\n                    <div style={{marginTop: 12}}>\n                      <h4>Type</h4>\n                    </div>\n                    <Columns>\n                      <Column isSize={{desktop: '1/2'}}>\n                        <TextField\n                          placeholder={'eg. sports, clubbing, casual wear'}\n                          type={'text'}\n                          label={'What are these shoes ideal for?'}\n                          name={'idealFor'}\n                        />\n                      </Column>\n                      <Column isSize={{desktop: '1/2'}}>\n                        <TextField\n                          placeholder={'eg. Football, Basketball...etc'}\n                          type={'text'}\n                          label={'Sports Type'}\n                          name={'sportsType'}\n                        />\n                      </Column>\n                    </Columns>\n                  </div>\n*/}\n                <div style={{marginTop: 24}}>\n                  <Button\n                    isLoading={isSubmitting}\n                    isColor={'info'}\n                    style={{width: '100%'}}\n                    onClick={() => submitForm()}\n                  >\n                    Update\n                  </Button>\n                </div>\n              </FormItemsParent>\n            </Form>\n          )}\n        </Formik>\n        <div style={{textAlign: 'center'}}>\n          <Button\n            style={{width: '25%', marginTop: '24px'}}\n            onClick={() => deleteProduct(productSlug)}\n          >\n            Delete this product\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst FormItemsParent = styled.div`\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  padding: 48px 60px;\n  margin-top: 48px;\n  max-width: 1200px;\n  \n  a {\n    text-decoration: none;\n  }\n  \n  h4 {\n    margin-top: 0;\n    margin-bottom: 0;\n  }\n  \n  .rdw-option-wrapper, .rdw-dropdown-wrapper {\n    transition: all 0.25s ease-in-out;\n  }\n  \n  .rdw-dropdownoption-default {\n    color: #767676;\n    font-size: 14px;\n  }\n  \n  .rdw-dropdown-wrapper:hover, .rdw-option-wrapper:hover {\n    box-shadow: none !important;\n    border: 1px solid gray;\n`;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pages/admin/products/SingleProduct.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/admin/products/SingleProduct.tsx	(date 1616757159424)
@@ -22,6 +22,8 @@
 import useSWR from 'swr/esm/use-swr';
 import {deleteUploadedImageAction} from '../../../state/actions';
 import {BrandType} from '../../../types';
+import {EmptyState} from '../../../components';
+import {DeadEyes2} from '../../../constants/icons';
 
 const MESSAGES ={
   REQUIRED: "This field is required.",
@@ -97,7 +99,17 @@
       sportsType: data.meta.sportsType,
     }
   ));
-  const {data: thisProductData, mutate} = useSWR([`/product/${productSlug}`, productSlug], singleProductFetcher);
+  const {data: thisProductData, error: fetchProductError, mutate} = useSWR([`/product/${productSlug}`, productSlug], singleProductFetcher);
+
+  if (fetchProductError){
+    return (
+      <EmptyState
+        icon={DeadEyes2}
+        centerAlign={true}
+        message={'An error occurred while fetching this product: ' + fetchProductError}
+        title={'Could not fetch product'} />
+    );
+  }
 
   if (!thisProductData) {
     return (
Index: src/pages/admin/brands/BrandProducts.jsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useEffect, useState} from 'react';\nimport {EmptyState} from '../../../components';\nimport PageNotFound from '../../../assets/images/icons/page-not-found.svg';\nimport {Button} from 'bloomer';\nimport CreateProductModal from '../products/modals/CreateProductModal';\nimport Loading from '../../../components/loading';\nimport {useAuth} from '../../../network';\nimport {useDispatch} from 'react-redux';\n\n\nfunction BrandProducts({match}) {\n  const api = useAuth();\n  const dispatch = useDispatch();\n\n  async function getBrand(id) {\n    return await api.brands.get();\n  }\n\n  /*async function getSingleBrandProducts(id) {\n    const {data} = await api.brand(id).getProducts();\n    return data;\n}*/\n\n  const [thisBrand, setThisBrand] = useState({});\n  const brandId = match.params.id;\n    //here, brandId is both the key passed for caching and the value passed to 'getBrand'\n  useEffect(() => {\n    dispatch(api.brands.getBrandByUuid({uuid: brandId}))\n      .then(({data})=> {\n        setThisBrand(data);\n      })\n  }, []);\n\n\n    const [isCreateBrandModalActive, setCreateBrandModalActive] = useState(false);\n\n    return (\n        <>\n            <div>\n                Brand Products\n            </div>\n\n            <div style={{background: 'white', height: \"100%\"}}>\n                <EmptyState title=\"There's nothing here yet.\"\n                            icon={PageNotFound}\n                            style={{height: '80vh', display: 'grid', alignItems: 'center'}}\n                            message=\"Looks like this brand doesn't have any products uploaded yet.\"\n                            prompt={() => (\n                                <div>\n                                    <CreateProductModal isActive={isCreateBrandModalActive}\n                                                        brand={thisBrand}\n                                                        onClose={() => setCreateBrandModalActive(false)}\n                                    />\n                                    <Button style={{\n                                        padding: 0,\n                                        background: 'transparent',\n                                        borderBottom: '1px solid grey'\n                                    }} isColor=\"light\" onClick={() => {\n                                        setCreateBrandModalActive(true)\n                                    }}>\n                                        Upload a new product\n                                    </Button>\n                                </div>\n                            )}\n                />\n            </div>\n        </>\n    )\n}\n\nexport default BrandProducts;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pages/admin/brands/BrandProducts.jsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/admin/brands/BrandProducts.jsx	(date 1616757159408)
@@ -6,6 +6,7 @@
 import Loading from '../../../components/loading';
 import {useAuth} from '../../../network';
 import {useDispatch} from 'react-redux';
+import useSWR from 'swr/esm/use-swr';
 
 
 function BrandProducts({match}) {
@@ -21,51 +22,48 @@
     return data;
 }*/
 
-  const [thisBrand, setThisBrand] = useState({});
   const brandId = match.params.id;
-    //here, brandId is both the key passed for caching and the value passed to 'getBrand'
-  useEffect(() => {
-    dispatch(api.brands.getBrandByUuid({uuid: brandId}))
-      .then(({data})=> {
-        setThisBrand(data);
-      })
-  }, []);
 
+  const thisBrandFetcher = () => api.brands.getBrandByUuid({uuid: brandId});
 
-    const [isCreateBrandModalActive, setCreateBrandModalActive] = useState(false);
+  const {data: thisBrand} = useSWR(`/brands/${brandId}`, thisBrandFetcher);
+  const [isCreateBrandModalActive, setCreateBrandModalActive] = useState(false);
 
-    return (
-        <>
-            <div>
-                Brand Products
-            </div>
+
+  return (
+    <>
+      <div>
+        Brand Products
+      </div>
 
-            <div style={{background: 'white', height: "100%"}}>
-                <EmptyState title="There's nothing here yet."
-                            icon={PageNotFound}
-                            style={{height: '80vh', display: 'grid', alignItems: 'center'}}
-                            message="Looks like this brand doesn't have any products uploaded yet."
-                            prompt={() => (
-                                <div>
-                                    <CreateProductModal isActive={isCreateBrandModalActive}
-                                                        brand={thisBrand}
-                                                        onClose={() => setCreateBrandModalActive(false)}
-                                    />
-                                    <Button style={{
-                                        padding: 0,
-                                        background: 'transparent',
-                                        borderBottom: '1px solid grey'
-                                    }} isColor="light" onClick={() => {
-                                        setCreateBrandModalActive(true)
-                                    }}>
-                                        Upload a new product
-                                    </Button>
-                                </div>
-                            )}
-                />
-            </div>
-        </>
-    )
+      <div style={{background: 'white', height: '100%'}}>
+        <EmptyState
+          title="There's nothing here yet."
+          icon={PageNotFound}
+          style={{height: '80vh', display: 'grid', alignItems: 'center'}}
+          message="Looks like this brand doesn't have any products uploaded yet."
+          iconWidth={48}
+          prompt={() => (
+            <div>
+              <CreateProductModal
+                isActive={isCreateBrandModalActive}
+                onClose={() => setCreateBrandModalActive(false)}
+              />
+              <Button style={{
+                padding: 0,
+                background: 'transparent',
+                borderBottom: '1px solid grey',
+              }} isColor="light" onClick={() => {
+                setCreateBrandModalActive(true);
+              }}>
+                Upload a new product
+              </Button>
+            </div>
+          )}
+        />
+      </div>
+    </>
+  );
 }
 
 export default BrandProducts;
Index: src/helpers/validationMessages.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/helpers/validationMessages.tsx	(date 1616757159360)
+++ src/helpers/validationMessages.tsx	(date 1616757159360)
@@ -0,0 +1,7 @@
+const MIN = length => `This field should be at least ${length} chars long`,
+  MAX = length => `This field should contain a max of ${length} chars`,
+  MIN_MAX = (min, max) => `This field should be between ${min} and ${max} chars long.`,
+  REQUIRED = 'This field cannot be empty',
+  INVALID_URL = 'Please provide a valid url';
+
+export {REQUIRED, MIN, MAX, MIN_MAX, INVALID_URL};
Index: .well-known/cf-2fa-verify.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .well-known/cf-2fa-verify.txt	(date 1616757159028)
+++ .well-known/cf-2fa-verify.txt	(date 1616757159028)
@@ -0,0 +1,1 @@
+cQQRsNdYK7
\ No newline at end of file
Index: public/.well-known/cf-2fa-verify.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- public/.well-known/cf-2fa-verify.txt	(date 1616757159208)
+++ public/.well-known/cf-2fa-verify.txt	(date 1616757159208)
@@ -0,0 +1,1 @@
+cQQRsNdYK7
\ No newline at end of file
Index: src/pages/admin/products/modals/CreateProductModal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/**\n * TODO:\n *  - Improve loading, success & error ux\n *  - Get 'add more' working\n */\n\nimport React, {useEffect, useState} from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport {Button, Column, Columns, Field, Modal, ModalBackground, ModalClose, ModalContent} from 'bloomer';\nimport {Form, Formik, useFormikContext} from 'formik';\nimport TextField from '../../../../components/input/TextField';\nimport '../../../../assets/style/bulma-fx';\nimport {v4 as uuidv4} from 'uuid';\nimport {capitalize, cleanString, extractErrorMessage, slugify} from '../../../../helpers';\nimport 'react-quill/dist/quill.snow.css';\nimport Editor from '../../brands/Editor';\nimport CustomImageUploader from '../../../../components/upload/CustomImageUploader';\nimport * as Yup from 'yup';\nimport SelectField from '../../../../components/input/SelectField';\nimport {useAuth} from '../../../../network';\nimport {RootStateOrAny, useDispatch, useSelector} from 'react-redux';\nimport useSWR from 'swr/esm/use-swr';\nimport CreatableSelect from 'react-select/creatable';\nimport {BrandType, CategoryType} from '../../../../types';\nimport {MetaState} from '../../../../state/reducers/metaReducers';\nimport {deleteUploadedImageAction} from '../../../../state/actions';\nimport {useNotify} from '../../../../hooks';\n\n\nconst conditions = [\n    {\n        label: 'New',\n        value: 'new',\n    },\n    {\n        label: 'Refurbished',\n        value: 'refurbished',\n    },\n    {\n        label: 'Slightly Worn',\n        value: 'worn',\n    },\n];\n\n\nconst MESSAGES ={\n    REQUIRED: \"This field is required.\",\n    TOO_SHORT: \"This field is too short.\",\n    TOO_LONG: \"This field is too long.\"\n}\n\nconst CreateProductValidationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(MESSAGES.REQUIRED)\n    .min(3, 'This field should be at least 3 characters long'),\n  short: Yup.string()\n    .required(MESSAGES.REQUIRED),\n  long: Yup.string()\n    .required(MESSAGES.REQUIRED),\n  slug: Yup.string()\n    .required(MESSAGES.REQUIRED),\n  folder: Yup.string()\n    .required(MESSAGES.REQUIRED),\n  brand: Yup.string()\n    .required(MESSAGES.REQUIRED),\n  copy: Yup.string()\n    .required(MESSAGES.REQUIRED)\n    .min(80, 'SEO copy should not be less than 80 chars')\n    .max(150, 'SEO copy should not be more than 150 chars'),\n  price: Yup.number()\n    .required(MESSAGES.REQUIRED),\n  purchasePrice: Yup.number()\n    .min(0, 'Purchase price cannot be less than 0')\n    .required(MESSAGES.REQUIRED),\n  productType: Yup.string()\n    .required(MESSAGES.REQUIRED)\n    .oneOf(['sneaker']),\n  sex: Yup.string()\n    .required(MESSAGES.REQUIRED)\n    .oneOf(['M', 'F', 'U']),\n  condition: Yup.string()\n    .required(MESSAGES.REQUIRED)\n    .oneOf(['new', 'refurbished', 'worn']),\n  size: Yup.number()\n    .when('productType', {is: 'sneaker', then: Yup.number().required(MESSAGES.REQUIRED)}),\n  sizeCountry: Yup.string()\n    .when('productType', {is: 'sneaker', then: Yup.string().required(MESSAGES.REQUIRED)}),\n  inStock: Yup.number()\n    .required(MESSAGES.REQUIRED)\n    .min(0, 'Stock cannot be less than 0'),\n  uuid: Yup.string()\n    .required(MESSAGES.REQUIRED),\n});\n\nconst uuid = uuidv4();\n\nfunction Monitor({brand}) {\n  const {values} = useFormikContext<any>();\n\n  useEffect(() => {\n    if (values.name) {\n      values.slug = slugify(values.name, {\n        lower: true,\n        strict: true,\n      });\n      if (brand && brand.name) {\n        values.brand = brand.name;\n        values.folder = `products/${slugify(values.brand, {lower: true})}}/${values.slug}`;\n      }\n\n      if (values.brand && values.slug) {\n        values.folder = `products/${slugify(values.brand, {lower: true})}/${values.slug}/`;\n      }\n\n    } else {\n      values.slug = '';\n      values.folder = '';\n    }\n  }, [values, brand]);\n\n  return <span />;\n}\n\nconst CreateProductModal = props => {\n  const api = useAuth();\n  const dispatch = useDispatch();\n  const thisBrand = props.brand;\n\n  const notify = useNotify();\n\n  const [uploaderId, setUploaderId] = useState(null);\n\n  const metaState: MetaState = useSelector((state: RootStateOrAny) => state.meta);\n\n  const uploadedImages = metaState.components.imageUploader[uploaderId];\n\n    const allBrandsFetcher = () => api.brands.getAll().then(({data}) => data);\n    const {data: allBrands} = useSWR<BrandType[]>('/brands/all', allBrandsFetcher);\n\n    const allCategoriesFetcher = () => api.category.getAll().then(({data}) => data);\n    const {data: allCategories} = useSWR<CategoryType[]>('/categories', allCategoriesFetcher);\n\n    const [allCategoriesState, setAllCategoriesState] = useState([])\n\n    const [creatingCategory, setCreatingCategory] = useState(false)\n\n    useEffect(()=> {\n      if (allCategories){\n        setAllCategoriesState(allCategories)\n      }\n    }, [allCategories])\n\n  return (\n    <div>\n      <Modal isActive={props.isActive} className={'modal-fx-fadeInScale'}>\n        <ModalBackground onClick={() => props.onClose()} />\n        <ModalContent>\n          <div\n            style={{\n              background: 'white',\n              display: props.isActive ? 'block' : 'none',\n              padding: '24px',\n              borderRadius: '4px',\n            }}>\n            <h2>Create a new product or variant</h2>\n            <Formik\n              initialValues={{\n                uuid,\n                name: '',\n                slug: '',\n                brand: '',\n                productType: 'sneaker',\n                images: [],\n                style: '',\n                sex: '',\n                folder: '',\n                condition: '',\n                primaryColor: '',\n                secondaryColor: '',\n                purchasePrice: 0,\n                long: '',\n                categories: [],\n              }}\n              validationSchema={CreateProductValidationSchema}\n              onSubmit={async (submitValues, {setSubmitting}) => {\n\n                const values = {\n                  ...submitValues,\n                  admin: {\n                    purchasePrice: submitValues.purchasePrice,\n                  },\n                };\n\n                setSubmitting(true);\n                values.images = uploadedImages;\n\n                if (!uploadedImages){\n                  notify.warning(\"Please select a few images before proceeding.\")\n                  return;\n                }\n\n                const {data, ...rest} = await dispatch<any>(api.products.create(values));\n\n                if (data) {\n                  setSubmitting(false);\n                  dispatch(deleteUploadedImageAction({uploaderId}))\n                  notify.success(data.message);\n                } else {\n                  setSubmitting(false);\n                  const message = extractErrorMessage(rest);\n                  notify.error(message);\n                }\n\n              }}\n            >\n              {({values, isSubmitting, errors, setFieldValue}) => (\n                <Form>\n                  <div>\n                    <h4>Product images</h4>\n                    <CustomImageUploader\n                      allowMultiple={true}\n                      id={`create-product-uploader`}\n                      folder={values.folder}\n                      instantUpload={false}\n                      isSelectDisabled={!values.brand || !values.name}\n                      onUpload={(err, {uploaderId}) => {\n                        setUploaderId(uploaderId);\n                      }}\n                      onClickSelectedImage={(images) => {\n                        props.onClickSelectedImage(images);\n                      }}\n                    />\n                  </div>\n\n                  <h4>Basic details</h4>\n                  <Field isGrouped style={{\n                    display: 'grid',\n                    gridTemplateColumns: '1fr 1fr',\n                    gridGap: '18px',\n                  }}>\n                    <TextField\n                      label={<>What's the <span className=\"accented\">name</span> of this\n                        product?</>}\n                      placeholder=\"eg. Air Force 1\" type=\"text\"\n                      name=\"name\" />\n                    <TextField\n                      label={<>Specify a <span className=\"accented\">slug</span> to be used for\n                        this product.</>}\n                      placeholder=\"eg. air-force-1\"\n                      type=\"text\"\n                      name=\"slug\" />\n                  </Field>\n                  <Field\n                    isGrouped style={{\n                    display: 'grid',\n                    gridTemplateColumns: '1fr 1fr',\n                    gridGap: '18px',\n                  }}>\n                    <div>\n                      <label>\n                        What brand is this product assigned to?\n                      </label>\n                      <Select\n                        placeholder=\"eg. Adidas\"\n                        options={allBrands?.map(item => ({\n                          label: capitalize(item.name),\n                          value: item.name,\n                        }))}\n                        onChange={({value})=> setFieldValue('brand', value)}\n                        disabled={!!thisBrand}\n                        type=\"text\"\n                        name=\"brand\" />\n                    </div>\n\n                    <TextField label={<>Which <span className=\"accented\">folder </span>\n                      will the images be saved in?</>}\n                               placeholder=\"eg. /adidas/adidas-nmd\"\n                               disabled\n                               type=\"text\"\n                               name=\"folder\" />\n                  </Field>\n\n                  <Monitor brand={thisBrand} />\n                  <h4>Product description</h4>\n                  <Field>\n                    <Editor\n                      defaultValue={values.long}\n                      label={<>Describe this product <span\n                        className=\"accented\">in as many or few words</span> as\n                        possible.</>}\n                      placeholder=\"Please enter a description\"\n                      onChange={value => setFieldValue('long', value)}\n                    />\n                    <span id=\"word-count\" />\n                  </Field>\n                  <Field>\n                    <TextField\n                      label={<>Describe <span\n                        className='accented'>who this product is ideal for</span> in 80\n                        chars or\n                        less</>}\n                      placeholder=\"Short description\"\n                      type=\"textarea\"\n                      chars={80}\n                      name=\"short\" />\n\n                  </Field>\n                  <Field>\n                    <TextField\n                      label={<>With suitable keywords, write an <span\n                        className=\"accented\">SEO copy</span> for\n                        this product in 80 - 150 chars</>}\n                      placeholder=\"Copy\"\n                      type=\"textarea\"\n                      chars={150}\n                      name=\"copy\" />\n\n                  </Field>\n                  <h4>Stock</h4>\n                  <Columns>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <TextField\n                          label={<>\n                            <span className='accented'>How many products</span> are in stock?</>}\n                          type=\"number\"\n                          placeholder=\"eg. 10\"\n                          name=\"inStock\" />\n                      </Field>\n\n                    </Column>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <TextField\n                          label={<>\n                            What &nbsp;\n                            <span className='accented'>\n                              price\n                              </span> is this product?</>}\n                          type=\"number\"\n                          placeholder=\"eg. 4,000\"\n                          name=\"price\" />\n                      </Field>\n                    </Column>\n                  </Columns>\n                  <h4>Admin details</h4>\n                  <Columns>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <TextField\n                          label={<>\n                            What was the &nbsp;\n                            <span className='accented'>purchase price</span> &nbsp;\n                            of this product?</>}\n                          type=\"number\"\n                          placeholder=\"eg. 10\"\n                          name=\"purchasePrice\" />\n                      </Field>\n\n                    </Column>\n                  </Columns>\n                  <h4>Product Details</h4>\n                  <Field>\n                    <TextField\n                      disabled\n                      label={\n                        <>\n                          Don't worry. This is filled&nbsp;\n                          <span className='accented'>automatically</span>.\n                        </>\n                      }\n                      placeholder={'uuid'}\n                      type=\"text\"\n                      name=\"uuid\" />\n\n                  </Field>\n                  <Columns>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <SelectField\n                          label={\n                            <>What <span\n                              className='accented'> type of product </span>\n                              is this product?\n                            </>}\n                          placeholder={'Product Type'}\n                          type=\"text\"\n                          options={[\n                            {\n                              value: 'sneaker',\n                              label: 'Sneaker',\n                            },\n                          ]}\n                          name=\"productType\" />\n\n                      </Field>\n\n                    </Column>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <TextField\n                          label={\n                            <>What <span\n                              className='accented'>size </span>\n                              is this product?\n                            </>\n                          }\n                          placeholder={'eg. 44'}\n                          type=\"number\"\n                          name=\"size\" />\n\n                      </Field>\n\n                    </Column>\n                  </Columns>\n                  <Columns>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <label>\n                        Is this product better suited\n                        for men or women?\n                      </label>\n                      <Select\n                        defaultValue={{\n                          value: 'M',\n                        }}\n                        value={\n                          values.sex && {\n                            label: values.sex === 'M' ? 'Men' : 'Women',\n                            value: values.sex,\n                          }\n                        }\n                        options={[\n                          {\n                            value: 'M',\n                            label: 'Men',\n                          },\n                          {\n                            value: 'F',\n                            label: 'Women',\n                          },\n                        ]}\n                        placeholder={'eg. Men or Women'}\n                        onChange={({value}) => setFieldValue('sex', value)}\n                      />\n                    </Column>\n\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <label>\n                          <>What <span className='accented'> &nbsp;\n                            country's measurement system &nbsp;\n                            </span> best suits this product?\n                          </>\n                        </label>\n                        <SelectField\n                          name={'sizeCountry'}\n                          options={[\n                            {\n                              value: 'uk',\n                              label: 'UK',\n                            },\n                            {\n                              value: 'us',\n                              label: 'US',\n                            },\n                          ]}\n                          placeholder={'eg. UK'}\n                        />\n\n\n                      </Field>\n\n                    </Column>\n                  </Columns>\n                  <Columns>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <label>\n                          What &nbsp;\n                          <span className={'accented'}>color</span>\n                          &nbsp;\n                          is this product\n                        </label>\n                        <div>\n                          <div style={{\n                            background: values.primaryColor || '#000',\n                            width: 60,\n                            height: 60,\n                            marginBottom: 4,\n                            borderRadius: 4,\n                          }} />\n                          <input type={'color'}\n                                 onChange={(e) => {\n                                   setFieldValue('primaryColor', e.target.value);\n                                 }}\n                          />\n                          <small>\n                            {errors.primaryColor}\n                          </small>\n                        </div>\n\n                      </Field>\n\n                    </Column>\n                    <Column isSize={{desktop: '1/2'}}>\n                      <Field>\n                        <label>\n                          <>What <span className='accented'>\n                                                            secondary color\n                                                        </span> is this product?\n                          </>\n                        </label>\n                        <div style={{\n                          background: values.secondaryColor || '#000',\n                          width: 60,\n                          height: 60,\n                          marginBottom: 4,\n                          borderRadius: 4,\n                        }} />\n                        <input type={'color'}\n                               onChange={(e) => {\n                                 setFieldValue('secondaryColor', e.target.value);\n                               }}\n                        />\n\n                        <small>\n                          {errors.secondaryColor}\n                        </small>\n\n                      </Field>\n\n\n                    </Column>\n                  </Columns>\n\n                  <div>\n                    <div>\n                      <h4>Misc</h4>\n                      <Columns>\n                        <Column isSize={{desktop: '1/2'}}>\n                          <div>\n                            <label>This product's current condition</label>\n                            <Select\n                              defaultValue={\n                                values.condition && {\n                                  label: capitalize(values.condition),\n                                  value: values.condition,\n                                }\n                              }\n                              placeholder=\"eg. New or Refurbished\"\n                              options={conditions}\n                              onChange={({value}) => setFieldValue('condition', value)}\n                            />\n                          </div>\n                        </Column>\n                        <Column isSize={{desktop: '1/2'}}>\n                          <label>Shoe style</label>\n                          <Select\n                            placeholder={'eg. Low Cut or High Cut'}\n                            defaultValue={\n                              values.style && {\n                                label: capitalize(values.style),\n                                value: values.style,\n                              }\n                            }\n                            options={[\n                              {\n                                label: 'High-cut',\n                                value: 'high-cut',\n                              },\n                              {\n                                label: 'Mid-cut',\n                                value: 'mid-cut',\n                              },\n                              {\n                                label: 'Low-cut',\n                                value: 'low-cut',\n                              },\n                            ]}\n                            onChange={style => setFieldValue('style', style.value)}\n                          />\n                        </Column>\n                      </Columns>\n                      <Columns>\n                        <Column isSize={{desktop: '1/2'}}>\n                          <Field>\n                            <label>Categories</label>\n                            <CreatableSelect\n                              isMulti={true}\n                              onCreateOption={async (inputValue) => {\n                                setCreatingCategory(true);\n                                const response = await dispatch<any>(api.category.create({name: inputValue}));\n                                if (response.data) {\n                                  setAllCategoriesState([...allCategoriesState, response.data]);\n                                }\n                                setCreatingCategory(false);\n                              }}\n                              isLoading={creatingCategory}\n                              placeholder={'eg. Sneakers, Men\\'s shoes`'}\n                              onChange={selectedCategories => {\n                                const mappedCategories = selectedCategories.map(item => ({\n                                  name: item.label,\n                                  slug: item.value,\n                                }));\n                                setFieldValue('categories', mappedCategories);\n                              }}\n                              defaultValue={\n                                values.categories?.length &&\n                                values.categories?.map(item => {\n                                  return {\n                                    value: cleanString(item.name, '-'),\n                                    label: item.name,\n                                  };\n                                })\n                              }\n                              options={allCategoriesState?.map((item: CategoryType) => ({\n                                label: item.name,\n                                value: item.slug,\n                              }))}\n                            />\n                          </Field>\n                        </Column>\n\n                      </Columns>\n                    </div>\n                  </div>\n\n                  <div style={{\n                    display: 'flex',\n                    justifyContent: 'center',\n                    alignItems: 'center',\n                    flexDirection: 'column',\n                    marginTop: 24,\n                  }}>\n                    <Button\n                      isLoading={isSubmitting}\n                      style={{width: '100%'}}\n                      isColor=\"primary\"\n                      type=\"submit\"\n                    >\n                      Submit\n                    </Button>\n                  </div>\n                </Form>\n              )}\n            </Formik>\n          </div>\n        </ModalContent>\n        <ModalClose onClick={() => props.onClose()} />\n      </Modal>\n    </div>\n  );\n};\n\nCreateProductModal.propTypes = {\n    isActive: PropTypes.bool,\n    onCreate: PropTypes.func,\n    onError: PropTypes.func,\n    onClose: PropTypes.func.isRequired,\n    brand: PropTypes.object,\n    onClickSelectedImage: PropTypes.func\n};\n\nexport default CreateProductModal;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pages/admin/products/modals/CreateProductModal.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/admin/products/modals/CreateProductModal.tsx	(date 1616757159452)
@@ -5,119 +5,95 @@
  */
 
 import React, {useEffect, useState} from 'react';
-import PropTypes from 'prop-types';
 import Select from 'react-select';
-import {Button, Column, Columns, Field, Modal, ModalBackground, ModalClose, ModalContent} from 'bloomer';
-import {Form, Formik, useFormikContext} from 'formik';
+import {Button, Column, Columns, Field} from 'bloomer';
+import {FieldArray, Form, Formik, useFormikContext} from 'formik';
 import TextField from '../../../../components/input/TextField';
 import '../../../../assets/style/bulma-fx';
 import {v4 as uuidv4} from 'uuid';
-import {capitalize, cleanString, extractErrorMessage, slugify} from '../../../../helpers';
+import {capitalize, extractErrorMessage, slugify} from '../../../../helpers';
 import 'react-quill/dist/quill.snow.css';
 import Editor from '../../brands/Editor';
 import CustomImageUploader from '../../../../components/upload/CustomImageUploader';
 import * as Yup from 'yup';
-import SelectField from '../../../../components/input/SelectField';
+import {SelectField} from '../../../../components/input';
 import {useAuth} from '../../../../network';
 import {RootStateOrAny, useDispatch, useSelector} from 'react-redux';
 import useSWR from 'swr/esm/use-swr';
 import CreatableSelect from 'react-select/creatable';
-import {BrandType, CategoryType} from '../../../../types';
+import {BrandType, CategoryType, ProductTypeType} from '../../../../types';
 import {MetaState} from '../../../../state/reducers/metaReducers';
-import {deleteUploadedImageAction} from '../../../../state/actions';
 import {useNotify} from '../../../../hooks';
-
+import CustomModal from '../../../../components/CustomModal';
+import styled from 'styled-components';
+import CreateVariantComponent from './CreateVariantComponent';
+import { deleteUploadedImageAction } from '../../../../state/actions';
 
-const conditions = [
-    {
-        label: 'New',
-        value: 'new',
-    },
-    {
-        label: 'Refurbished',
-        value: 'refurbished',
-    },
-    {
-        label: 'Slightly Worn',
-        value: 'worn',
-    },
-];
 
+// const MESSAGES = {
+//   REQUIRED: 'This field is required.',
+//   TOO_SHORT: 'This field is too short.',
+//   TOO_LONG: 'This field is too long.',
+// };
 
-const MESSAGES ={
-    REQUIRED: "This field is required.",
-    TOO_SHORT: "This field is too short.",
-    TOO_LONG: "This field is too long."
-}
-
-const CreateProductValidationSchema = Yup.object().shape({
-  name: Yup.string()
-    .required(MESSAGES.REQUIRED)
-    .min(3, 'This field should be at least 3 characters long'),
-  short: Yup.string()
-    .required(MESSAGES.REQUIRED),
-  long: Yup.string()
-    .required(MESSAGES.REQUIRED),
-  slug: Yup.string()
-    .required(MESSAGES.REQUIRED),
-  folder: Yup.string()
-    .required(MESSAGES.REQUIRED),
-  brand: Yup.string()
-    .required(MESSAGES.REQUIRED),
-  copy: Yup.string()
-    .required(MESSAGES.REQUIRED)
-    .min(80, 'SEO copy should not be less than 80 chars')
-    .max(150, 'SEO copy should not be more than 150 chars'),
-  price: Yup.number()
-    .required(MESSAGES.REQUIRED),
-  purchasePrice: Yup.number()
-    .min(0, 'Purchase price cannot be less than 0')
-    .required(MESSAGES.REQUIRED),
-  productType: Yup.string()
-    .required(MESSAGES.REQUIRED)
-    .oneOf(['sneaker']),
-  sex: Yup.string()
-    .required(MESSAGES.REQUIRED)
-    .oneOf(['M', 'F', 'U']),
-  condition: Yup.string()
-    .required(MESSAGES.REQUIRED)
-    .oneOf(['new', 'refurbished', 'worn']),
-  size: Yup.number()
-    .when('productType', {is: 'sneaker', then: Yup.number().required(MESSAGES.REQUIRED)}),
-  sizeCountry: Yup.string()
-    .when('productType', {is: 'sneaker', then: Yup.string().required(MESSAGES.REQUIRED)}),
-  inStock: Yup.number()
-    .required(MESSAGES.REQUIRED)
-    .min(0, 'Stock cannot be less than 0'),
-  uuid: Yup.string()
-    .required(MESSAGES.REQUIRED),
-});
+//todo: add validation to create product page
+// const CreateProductValidationSchema = Yup.object().shape({
+//   name: Yup.string()
+//     .required(MESSAGES.REQUIRED)
+//     .min(3, 'This field should be at least 3 characters long'),
+//   short: Yup.string()
+//     .required(MESSAGES.REQUIRED),
+//   long: Yup.string()
+//     .required(MESSAGES.REQUIRED),
+//   slug: Yup.string()
+//     .required(MESSAGES.REQUIRED),
+//   folder: Yup.string()
+//     .required(MESSAGES.REQUIRED),
+//   brand: Yup.string()
+//     .required(MESSAGES.REQUIRED),
+//   seo: Yup.string()
+//     .required(MESSAGES.REQUIRED)
+//     .min(80, 'SEO copy should not be less than 80 chars')
+//     .max(150, 'SEO copy should not be more than 150 chars'),
+//   originalPrice: Yup.number()
+//     .required(MESSAGES.REQUIRED),
+//   purchasePrice: Yup.number()
+//     .min(0, 'Purchase price cannot be less than 0')
+//     .required(MESSAGES.REQUIRED),
+//   productType: Yup.string()
+//     .required(MESSAGES.REQUIRED),
+//   inStock: Yup.number()
+//     .required(MESSAGES.REQUIRED)
+//     .min(0, 'Stock cannot be less than 0'),
+//   variants: Yup.array(
+//     Yup.object({
+//       inStock: Yup.number()
+//         .integer()
+//         .required("This field is required.")
+//     })
+//   )
+// });
 
 const uuid = uuidv4();
 
-function Monitor({brand}) {
+function Monitor() {
   const {values} = useFormikContext<any>();
 
   useEffect(() => {
     if (values.name) {
-      values.slug = slugify(values.name, {
+      const slug = slugify(values.name, {
         lower: true,
         strict: true,
       });
-      if (brand && brand.name) {
-        values.brand = brand.name;
-        values.folder = `products/${slugify(values.brand, {lower: true})}}/${values.slug}`;
-      }
 
-      if (values.brand && values.slug) {
-        values.folder = `products/${slugify(values.brand, {lower: true})}/${values.slug}/`;
+      if (values.brand) {
+        values.folder = `products/${slugify(values.brand.name, {lower: true})}/${slug}/`;
       }
 
     } else {
-      values.slug = '';
       values.folder = '';
     }
-  }, [values, brand]);
+  }, [values]);
 
   return <span />;
 }
@@ -125,114 +101,166 @@
 const CreateProductModal = props => {
   const api = useAuth();
   const dispatch = useDispatch();
-  const thisBrand = props.brand;
 
   const notify = useNotify();
 
-  const [uploaderId, setUploaderId] = useState(null);
+  const [uploaderId, setUploaderId] = useState('create-product-uploader');
 
   const metaState: MetaState = useSelector((state: RootStateOrAny) => state.meta);
 
-  const uploadedImages = metaState.components.imageUploader[uploaderId];
+  const uploadedImages = metaState.components.imageUploader['retro-image-uploader-'+ uploaderId];
 
-    const allBrandsFetcher = () => api.brands.getAll().then(({data}) => data);
-    const {data: allBrands} = useSWR<BrandType[]>('/brands/all', allBrandsFetcher);
+  const allBrandsFetcher = () => api.brands.getAll().then(({data}) => data);
+  const {data: allBrands} = useSWR<BrandType[]>('/brands/all', allBrandsFetcher);
 
-    const allCategoriesFetcher = () => api.category.getAll().then(({data}) => data);
-    const {data: allCategories} = useSWR<CategoryType[]>('/categories', allCategoriesFetcher);
+  const allProductTypesFetcher = () => api.productTypes.getAll().then(({data}) => data);
+  const {data: allProductTypes} = useSWR<ProductTypeType[]>('/product-type', allProductTypesFetcher);
+
+  const allCategoriesFetcher = () => api.category.getAll().then(({data}) => data);
+  const {data: allCategories} = useSWR<CategoryType[]>('/categories', allCategoriesFetcher);
 
-    const [allCategoriesState, setAllCategoriesState] = useState([])
+  const [allCategoriesState, setAllCategoriesState] = useState([]);
 
-    const [creatingCategory, setCreatingCategory] = useState(false)
+  const [creatingCategory, setCreatingCategory] = useState(false);
 
-    useEffect(()=> {
-      if (allCategories){
-        setAllCategoriesState(allCategories)
-      }
-    }, [allCategories])
+  useEffect(() => {
+    if (allCategories) {
+      setAllCategoriesState(allCategories);
+    }
+  }, [allCategories]);
 
   return (
     <div>
-      <Modal isActive={props.isActive} className={'modal-fx-fadeInScale'}>
-        <ModalBackground onClick={() => props.onClose()} />
-        <ModalContent>
-          <div
-            style={{
-              background: 'white',
-              display: props.isActive ? 'block' : 'none',
-              padding: '24px',
-              borderRadius: '4px',
-            }}>
-            <h2>Create a new product or variant</h2>
-            <Formik
-              initialValues={{
-                uuid,
-                name: '',
-                slug: '',
-                brand: '',
-                productType: 'sneaker',
-                images: [],
-                style: '',
-                sex: '',
-                folder: '',
-                condition: '',
-                primaryColor: '',
-                secondaryColor: '',
-                purchasePrice: 0,
-                long: '',
-                categories: [],
-              }}
-              validationSchema={CreateProductValidationSchema}
-              onSubmit={async (submitValues, {setSubmitting}) => {
+      <CustomModal
+        onClose={() => props.onClose()}
+        isActive={props.isActive}>
+        <CreateProductParent isActive={props.isActive}>
+          <h2>Create a new product or variant</h2>
+          <Formik
+            // validationSchema={CreateProductValidationSchema}
+            initialValues={{
+              uuid,
+              name: '',
+              brand: '',
+              productType: '',
+              images: [],
+              folder: '',
+              purchasePrice: 0,
+              availableOptions: [],
+              long: '',
+              short: '',
+              seo: '',
+              categories: [],
+              variants: [],
+            }}
+            onSubmit={async (submitValues, {setSubmitting}) => {
 
-                const values = {
-                  ...submitValues,
-                  admin: {
-                    purchasePrice: submitValues.purchasePrice,
-                  },
-                };
+              const values = {
+                ...submitValues,
+                productType: {
+                  uuid: submitValues.productType
+                },
+                images: uploadedImages,
+                description: {
+                  long: submitValues.long,
+                  short: submitValues.short,
+                  seo: submitValues.seo,
+                },
+                brands: [
+                  submitValues.brand
+                ],
+                admin: {
+                  purchasePrice: submitValues.purchasePrice,
+                },
+                availableOptions: Object.values( // we only want the values present in the reduced object
+                                                // the keys are only used to ensure uniqueness
+                  submitValues.variants
+                    // first flatten the options
+                    .flatMap(variant=> variant.options)
+                    // and map them so that they conform to our API's expectations
+                    .reduce((accumulator, currentValue)=> {
+                      // check if the accumulator object already contains the current option's name
+                      if (accumulator[currentValue.name]){
+                        accumulator[currentValue.name].uuid = currentValue.uuid;
+                        // if the optionValue doesn't already exist in the accumulator
+                        if (
+                          !accumulator[currentValue.name]
+                            .optionValues
+                            .some(item => item.uuid === currentValue.value.uuid)
+                        ) {
+                          accumulator[currentValue.name].optionValues.push(currentValue.value);
+                        } //  else {
+                          //  console.log('Already exists. Not pushing: ', currentValue);
+                        //  }
+                      }else {
+                        accumulator[currentValue.name] = {
+                          name: currentValue.name,
+                          uuid: currentValue.uuid,
+                          optionValues: [currentValue.value]
+                        }
+                      }
+                      return accumulator;
+                    }, {})
+                ),
+                variants: submitValues.variants.map(({options, ...rest})=> ({
+                  ...rest,
+                  optionValues: options.map(option=> ({
+                    uuid: option.value.uuid,
+                    value: option.value.value
+                  }))
+                }))
+              };
 
-                setSubmitting(true);
-                values.images = uploadedImages;
+              // clean up
+              delete values.long;
+              delete values.short;
+              delete values.seo;
+              delete values.brand;
 
-                if (!uploadedImages){
-                  notify.warning("Please select a few images before proceeding.")
-                  return;
-                }
+              console.log('Submitting: ', values);
+
+              if (!values.images) {
+                notify.warning('Please select a few images before proceeding.');
+                return;
+              }
 
+              setSubmitting(true);
+
+              try {
                 const {data, ...rest} = await dispatch<any>(api.products.create(values));
 
-                if (data) {
-                  setSubmitting(false);
-                  dispatch(deleteUploadedImageAction({uploaderId}))
-                  notify.success(data.message);
-                } else {
-                  setSubmitting(false);
-                  const message = extractErrorMessage(rest);
-                  notify.error(message);
-                }
+                setSubmitting(false);
+                dispatch(deleteUploadedImageAction({uploaderId}));
+                notify.success("Created product successfully");
+              }catch (e){
+                setSubmitting(false);
+                const message = extractErrorMessage(e);
+                notify.error(message);
+              }
 
-              }}
-            >
-              {({values, isSubmitting, errors, setFieldValue}) => (
-                <Form>
-                  <div>
-                    <h4>Product images</h4>
-                    <CustomImageUploader
-                      allowMultiple={true}
-                      id={`create-product-uploader`}
-                      folder={values.folder}
-                      instantUpload={false}
-                      isSelectDisabled={!values.brand || !values.name}
-                      onUpload={(err, {uploaderId}) => {
-                        setUploaderId(uploaderId);
-                      }}
-                      onClickSelectedImage={(images) => {
-                        props.onClickSelectedImage(images);
-                      }}
-                    />
-                  </div>
+
+            }}
+          >
+            {({values, isSubmitting, setFieldValue}) => (
+              <Form>
+                <div className="bordered">
+                  <h4>Product images</h4>
+                  <CustomImageUploader
+                    allowMultiple={true}
+                    id={`create-product-uploader`}
+                    folder={values.folder}
+                    instantUpload={false}
+                    isSelectDisabled={!values.brand || !values.name}
+                    onUpload={(err, {uploaderId}) => {
+                      setUploaderId(uploaderId);
+                    }}
+                    onClickSelectedImage={(images) => {
+                      props.onClickSelectedImage(images);
+                    }}
+                  />
+                </div>
 
+                <div className="bordered">
                   <h4>Basic details</h4>
                   <Field isGrouped style={{
                     display: 'grid',
@@ -244,19 +272,7 @@
                         product?</>}
                       placeholder="eg. Air Force 1" type="text"
                       name="name" />
-                    <TextField
-                      label={<>Specify a <span className="accented">slug</span> to be used for
-                        this product.</>}
-                      placeholder="eg. air-force-1"
-                      type="text"
-                      name="slug" />
-                  </Field>
-                  <Field
-                    isGrouped style={{
-                    display: 'grid',
-                    gridTemplateColumns: '1fr 1fr',
-                    gridGap: '18px',
-                  }}>
+
                     <div>
                       <label>
                         What brand is this product assigned to?
@@ -265,23 +281,77 @@
                         placeholder="eg. Adidas"
                         options={allBrands?.map(item => ({
                           label: capitalize(item.name),
-                          value: item.name,
+                          value: {
+                            uuid: item.uuid,
+                            name: item.name
+                          },
                         }))}
-                        onChange={({value})=> setFieldValue('brand', value)}
-                        disabled={!!thisBrand}
+                        onChange={({value}) => setFieldValue('brand', value)}
                         type="text"
                         name="brand" />
                     </div>
+                  </Field>
+                  <Field>
+                    <label>Categories</label>
+                    <CreatableSelect
+                      isMulti={true}
+                      onCreateOption={async (inputValue) => {
+                        setCreatingCategory(true);
+                        const response = await dispatch<any>(api.category.create({name: inputValue}));
+                        if (response.data) {
+                          setAllCategoriesState([...allCategoriesState, response.data]);
+                        }
+                        setCreatingCategory(false);
+                      }}
+                      isLoading={creatingCategory}
+                      placeholder={'eg. Sneakers, Men\'s shoes`'}
+                      onChange={selectedCategories => {
+                        const mappedCategories = selectedCategories.map(item => ({
+                          name: item.label,
+                          uuid: item.value,
+                        }));
+                        setFieldValue('categories', mappedCategories);
+                      }}
+                      defaultValue={
+                        values.categories?.length &&
+                        values.categories?.map(item => {
+                          return {
+                            value: item.uuid,
+                            label: item.name,
+                          };
+                        })
+                      }
+                      options={allCategoriesState?.map((item: CategoryType) => ({
+                        label: item.name,
+                        value: item.uuid,
+                      }))}
+                    />
+                  </Field>
+                </div>
 
-                    <TextField label={<>Which <span className="accented">folder </span>
-                      will the images be saved in?</>}
-                               placeholder="eg. /adidas/adidas-nmd"
-                               disabled
-                               type="text"
-                               name="folder" />
-                  </Field>
+                <div className="bordered">
+                  <div>
+                    <h4>Admin details</h4>
+                    <Columns>
+                      <Column isSize={{desktop: '1/2'}}>
+                        <Field>
+                          <TextField
+                            label={<>
+                              What was the &nbsp;
+                              <span className='accented'>purchase price</span> &nbsp;
+                              of this product?</>}
+                            type="number"
+                            placeholder="eg. 10"
+                            name="purchasePrice" />
+                        </Field>
 
-                  <Monitor brand={thisBrand} />
+                      </Column>
+                    </Columns>
+                  </div>
+                </div>
+
+                <Monitor />
+                <div className="bordered">
                   <h4>Product description</h4>
                   <Field>
                     <Editor
@@ -314,352 +384,184 @@
                       placeholder="Copy"
                       type="textarea"
                       chars={150}
-                      name="copy" />
+                      name="seo" />
 
                   </Field>
-                  <h4>Stock</h4>
-                  <Columns>
-                    <Column isSize={{desktop: '1/2'}}>
-                      <Field>
-                        <TextField
-                          label={<>
-                            <span className='accented'>How many products</span> are in stock?</>}
-                          type="number"
-                          placeholder="eg. 10"
-                          name="inStock" />
-                      </Field>
+                </div>
+                <div style={{marginTop: 12}}>
+                  <div className="bordered">
+                    <h4>Stock</h4>
+                    <Columns>
+                      <Column isSize={{desktop: '1/2'}}>
+                        <Field>
+                          <TextField
+                            label={<>
+                              <span className='accented'>How many products</span> are in stock?</>}
+                            type="number"
+                            placeholder="eg. 10"
+                            name="inStock" />
+                        </Field>
 
-                    </Column>
-                    <Column isSize={{desktop: '1/2'}}>
-                      <Field>
-                        <TextField
-                          label={<>
-                            What &nbsp;
-                            <span className='accented'>
+                      </Column>
+                      <Column isSize={{desktop: '1/2'}}>
+                        <Field>
+                          <TextField
+                            label={<>
+                              What &nbsp;
+                              <span className='accented'>
                               price
                               </span> is this product?</>}
-                          type="number"
-                          placeholder="eg. 4,000"
-                          name="price" />
-                      </Field>
-                    </Column>
-                  </Columns>
-                  <h4>Admin details</h4>
-                  <Columns>
-                    <Column isSize={{desktop: '1/2'}}>
-                      <Field>
-                        <TextField
-                          label={<>
-                            What was the &nbsp;
-                            <span className='accented'>purchase price</span> &nbsp;
-                            of this product?</>}
-                          type="number"
-                          placeholder="eg. 10"
-                          name="purchasePrice" />
-                      </Field>
-
-                    </Column>
-                  </Columns>
-                  <h4>Product Details</h4>
-                  <Field>
-                    <TextField
-                      disabled
-                      label={
-                        <>
-                          Don't worry. This is filled&nbsp;
-                          <span className='accented'>automatically</span>.
-                        </>
-                      }
-                      placeholder={'uuid'}
-                      type="text"
-                      name="uuid" />
-
-                  </Field>
+                            type="number"
+                            placeholder="eg. 4,000"
+                            name="originalPrice" />
+                        </Field>
+                      </Column>
+                    </Columns>
+                  </div>
+                </div>
+
+                <div className="bordered">
+                  <h4>Product type</h4>
+                  <p>
+                    The product type determines what kind of details the
+                    variants to be created will contain.
+                  </p>
                   <Columns>
                     <Column isSize={{desktop: '1/2'}}>
                       <Field>
                         <SelectField
-                          label={
-                            <>What <span
-                              className='accented'> type of product </span>
-                              is this product?
-                            </>}
+                          isAsync={false}
+                          label="What type is this product?"
                           placeholder={'Product Type'}
-                          type="text"
-                          options={[
-                            {
-                              value: 'sneaker',
-                              label: 'Sneaker',
-                            },
-                          ]}
-                          name="productType" />
-
+                          options={allProductTypes?.map(type => {
+                            return {
+                              value: type.uuid,
+                              label: capitalize(type.name),
+                            };
+                          })}
+                          onChange={({value}) => {
+                            setFieldValue('productType', value);
+                            // push an empty variant to the list to have it render immediately
+                            // a product type is selected
+                            setFieldValue('variants', [{}]);
+                          }}
+                        />
                       </Field>
-
-                    </Column>
-                    <Column isSize={{desktop: '1/2'}}>
-                      <Field>
-                        <TextField
-                          label={
-                            <>What <span
-                              className='accented'>size </span>
-                              is this product?
-                            </>
-                          }
-                          placeholder={'eg. 44'}
-                          type="number"
-                          name="size" />
-
-                      </Field>
-
                     </Column>
                   </Columns>
-                  <Columns>
-                    <Column isSize={{desktop: '1/2'}}>
-                      <label>
-                        Is this product better suited
-                        for men or women?
-                      </label>
-                      <Select
-                        defaultValue={{
-                          value: 'M',
-                        }}
-                        value={
-                          values.sex && {
-                            label: values.sex === 'M' ? 'Men' : 'Women',
-                            value: values.sex,
-                          }
-                        }
-                        options={[
-                          {
-                            value: 'M',
-                            label: 'Men',
-                          },
-                          {
-                            value: 'F',
-                            label: 'Women',
-                          },
-                        ]}
-                        placeholder={'eg. Men or Women'}
-                        onChange={({value}) => setFieldValue('sex', value)}
-                      />
-                    </Column>
-
-                    <Column isSize={{desktop: '1/2'}}>
-                      <Field>
-                        <label>
-                          <>What <span className='accented'> &nbsp;
-                            country's measurement system &nbsp;
-                            </span> best suits this product?
-                          </>
-                        </label>
-                        <SelectField
-                          name={'sizeCountry'}
-                          options={[
-                            {
-                              value: 'uk',
-                              label: 'UK',
-                            },
-                            {
-                              value: 'us',
-                              label: 'US',
-                            },
-                          ]}
-                          placeholder={'eg. UK'}
-                        />
-
-
-                      </Field>
-
-                    </Column>
-                  </Columns>
-                  <Columns>
-                    <Column isSize={{desktop: '1/2'}}>
-                      <Field>
-                        <label>
-                          What &nbsp;
-                          <span className={'accented'}>color</span>
-                          &nbsp;
-                          is this product
-                        </label>
-                        <div>
-                          <div style={{
-                            background: values.primaryColor || '#000',
-                            width: 60,
-                            height: 60,
-                            marginBottom: 4,
-                            borderRadius: 4,
-                          }} />
-                          <input type={'color'}
-                                 onChange={(e) => {
-                                   setFieldValue('primaryColor', e.target.value);
-                                 }}
-                          />
-                          <small>
-                            {errors.primaryColor}
-                          </small>
-                        </div>
-
-                      </Field>
-
-                    </Column>
-                    <Column isSize={{desktop: '1/2'}}>
-                      <Field>
-                        <label>
-                          <>What <span className='accented'>
-                                                            secondary color
-                                                        </span> is this product?
-                          </>
-                        </label>
-                        <div style={{
-                          background: values.secondaryColor || '#000',
-                          width: 60,
-                          height: 60,
-                          marginBottom: 4,
-                          borderRadius: 4,
-                        }} />
-                        <input type={'color'}
-                               onChange={(e) => {
-                                 setFieldValue('secondaryColor', e.target.value);
-                               }}
-                        />
-
-                        <small>
-                          {errors.secondaryColor}
-                        </small>
-
-                      </Field>
-
-
-                    </Column>
-                  </Columns>
-
-                  <div>
-                    <div>
-                      <h4>Misc</h4>
-                      <Columns>
-                        <Column isSize={{desktop: '1/2'}}>
-                          <div>
-                            <label>This product's current condition</label>
-                            <Select
-                              defaultValue={
-                                values.condition && {
-                                  label: capitalize(values.condition),
-                                  value: values.condition,
-                                }
-                              }
-                              placeholder="eg. New or Refurbished"
-                              options={conditions}
-                              onChange={({value}) => setFieldValue('condition', value)}
-                            />
-                          </div>
-                        </Column>
-                        <Column isSize={{desktop: '1/2'}}>
-                          <label>Shoe style</label>
-                          <Select
-                            placeholder={'eg. Low Cut or High Cut'}
-                            defaultValue={
-                              values.style && {
-                                label: capitalize(values.style),
-                                value: values.style,
-                              }
-                            }
-                            options={[
-                              {
-                                label: 'High-cut',
-                                value: 'high-cut',
-                              },
-                              {
-                                label: 'Mid-cut',
-                                value: 'mid-cut',
-                              },
-                              {
-                                label: 'Low-cut',
-                                value: 'low-cut',
-                              },
-                            ]}
-                            onChange={style => setFieldValue('style', style.value)}
-                          />
-                        </Column>
-                      </Columns>
-                      <Columns>
-                        <Column isSize={{desktop: '1/2'}}>
-                          <Field>
-                            <label>Categories</label>
-                            <CreatableSelect
-                              isMulti={true}
-                              onCreateOption={async (inputValue) => {
-                                setCreatingCategory(true);
-                                const response = await dispatch<any>(api.category.create({name: inputValue}));
-                                if (response.data) {
-                                  setAllCategoriesState([...allCategoriesState, response.data]);
-                                }
-                                setCreatingCategory(false);
-                              }}
-                              isLoading={creatingCategory}
-                              placeholder={'eg. Sneakers, Men\'s shoes`'}
-                              onChange={selectedCategories => {
-                                const mappedCategories = selectedCategories.map(item => ({
-                                  name: item.label,
-                                  slug: item.value,
-                                }));
-                                setFieldValue('categories', mappedCategories);
-                              }}
-                              defaultValue={
-                                values.categories?.length &&
-                                values.categories?.map(item => {
-                                  return {
-                                    value: cleanString(item.name, '-'),
-                                    label: item.name,
-                                  };
-                                })
-                              }
-                              options={allCategoriesState?.map((item: CategoryType) => ({
-                                label: item.name,
-                                value: item.slug,
-                              }))}
-                            />
-                          </Field>
-                        </Column>
-
-                      </Columns>
-                    </div>
-                  </div>
-
-                  <div style={{
-                    display: 'flex',
-                    justifyContent: 'center',
-                    alignItems: 'center',
-                    flexDirection: 'column',
-                    marginTop: 24,
-                  }}>
-                    <Button
-                      isLoading={isSubmitting}
-                      style={{width: '100%'}}
-                      isColor="primary"
-                      type="submit"
-                    >
-                      Submit
-                    </Button>
-                  </div>
-                </Form>
-              )}
-            </Formik>
-          </div>
-        </ModalContent>
-        <ModalClose onClick={() => props.onClose()} />
-      </Modal>
+                </div>
+                {
+                  values.productType && (
+                    <div className="bordered">
+                      <h4>Product variants</h4>
+                      <p>
+                        Select <b>one</b> value in every
+                        one of the available variant options.
+                      </p>
+                      <div>
+                        <FieldArray
+                          name={'variants'}
+                          render={arrayHelpers=> (
+                            <div>
+                              <div>
+                                {
+                                  values.variants?.map((variant, index) => (
+                                    <Columns>
+                                      <CreateVariantComponent
+                                        index={index}
+                                        onDeleteVariant={(index)=> arrayHelpers.remove(index)}
+                                        selectedProductType={values.productType}
+                                        allProductTypes={allProductTypes} />
+                                    </Columns>
+                                  ))
+                                }
+                              </div>
+                              <div>
+                                <Button
+                                  onClick={() => arrayHelpers.push({})}
+                                  style={{width: '100%'}}>
+                                  Add variant
+                                </Button>
+                              </div>
+                            </div>
+                          )}
+                        />
+                      </div>
+                    </div>
+                  )
+                }
+                <div style={{marginTop: 24}}>
+                  <Button
+                    isLoading={isSubmitting}
+                    style={{width: '100%'}}
+                    isColor="primary"
+                    type="submit"
+                  >
+                    Submit
+                  </Button>
+                </div>
+              </Form>
+            )}
+          </Formik>
+        </CreateProductParent>
+      </CustomModal>
     </div>
   );
 };
 
-CreateProductModal.propTypes = {
-    isActive: PropTypes.bool,
-    onCreate: PropTypes.func,
-    onError: PropTypes.func,
-    onClose: PropTypes.func.isRequired,
-    brand: PropTypes.object,
-    onClickSelectedImage: PropTypes.func
-};
+const CreateProductParent = styled.div<{isActive: boolean}>`
+  background: white;
+  display: ${props => props.isActive ? 'block' : 'none'};
+  border-radius: 4px;
+  
+  .bordered {
+    border: 1px solid lightgrey;
+    border-radius: 4px;
+    padding: 8px 12px;
+    transition: all 0.25s ease-in-out;
+    margin-top: 12px;
+  }
+  
+  // nested bordered
+  .bordered .bordered {
+    margin: 12px 12px;
+    
+    &.small {
+      margin: 0;
+    }
+  }
+  
+  .product-types {
+      display: flex;
+      width: 100%;
+      flex-wrap: wrap;
+      gap: 24px;
+  }
+  
+  .product-type {
+    margin-bottom: 24px;
+    margin-left: 12px;
+    margin-right: 12px;
+    flex: 1 1 150px;
+  }
+  
+  .option {
+      display: flex;
+      gap: 4px;
+  }
+  
+  .option-value {
+    flex: 1 1 80px;
+    
+    &.active {
+      border-color:#444444;
+    }
+    
+    &:hover {
+      cursor: pointer;
+      border-color: #444444;;
+    }
+  }
+`;
 
 export default CreateProductModal;
Index: src/config/env.config.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import dotenv from 'dotenv';\ndotenv.config();\n\nclass Env {\n  getApiHost() {\n    return this.isStaging()\n      ? 'https://api.staging.retrobie.com/api'\n      : this.isDev()\n      ? 'http://localhost:2500/api'\n      : 'https://api.retrobie.com/api';\n  }\n\n  getApiVersion() {\n    return 'v2';\n  }\n\n  getClientBaseUrl() {\n    return 'https://retrobie.com';\n  }\n\n  getApiBaseUrl() {\n    return `${this.getApiHost()}/${this.getApiVersion()}`;\n  }\n\n  getEnvironment() {\n    return process.env.REACT_APP_ENV;\n  }\n\n  isDev() {\n    return process.env.NODE_ENV === 'development';\n  }\n\n  isStaging() {\n    return (\n      process.env.REACT_APP_ENV === 'staging' ||\n      window.location.hostname.includes('netlify') ||\n      window.location.hostname.includes('vercel')\n    );\n  }\n\n  isProduction() {\n    return process.env.NODE_ENV === 'production';\n  }\n}\n\nexport default Env;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/config/env.config.ts	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/config/env.config.ts	(date 1616757159360)
@@ -1,6 +1,14 @@
 import dotenv from 'dotenv';
 dotenv.config();
 
+/**
+ * The NODE_ENV attribute is set automatically by React. It can only be 'production', 'test' or 'development'.
+ * As such, it's not necessary to set these values in their respective environments.
+ *
+ * Since React doesn't allow us to change these values, and we need a way to identify the 'staging'
+ *  environment, the REACT_APP_ENV variable is used for that purpose.
+ */
+
 class Env {
   getApiHost() {
     return this.isStaging()
@@ -22,8 +30,11 @@
     return `${this.getApiHost()}/${this.getApiVersion()}`;
   }
 
+  /**
+   * Get the current environment. It returns NODE_ENV if REACT_APP_ENV is not set
+   */
   getEnvironment() {
-    return process.env.REACT_APP_ENV;
+    return process.env.REACT_APP_ENV || process.env.NODE_ENV;
   }
 
   isDev() {
Index: src/pages/shipping/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {useState} from 'react';\nimport Layout from '../../components/Layout';\nimport styled from 'styled-components';\nimport {RootStateOrAny, useDispatch, useSelector} from 'react-redux';\nimport {addDashes, extractErrorMessage, formatNumberWithCommas} from '../../helpers';\nimport {EmptyState} from '../../components';\nimport {ErrorIconDark, GrimacingEmoji, NormalCart} from '../../constants/icons';\nimport {Button} from 'bloomer';\nimport {Form, Formik} from 'formik';\nimport * as Yup from 'yup';\nimport RadioField from '../../components/input/RadioField';\nimport LipaNaMpesa from '../../assets/images/logos/lipa-na-mpesa.png';\nimport MpesaLogo from '../../assets/images/logos/mpesa.svg';\nimport PeaceSign from '../../assets/images/emoji/peace-sign.png';\nimport PointingDown from '../../assets/images/emoji/backhand-index-pointing-down.png';\nimport IndexFinger from '../../assets/images/emoji/backhand-index-pointing-up.png';\nimport {ChevronRight} from 'react-feather';\nimport SimpleMap from '../../components/map/SimpleMap';\nimport Loading from '../../components/loading';\nimport {useAuth} from '../../network';\nimport PayWithMpesaOnlineModal from './PayWithMpesaOnlineModal';\nimport {ThunkDispatch} from 'redux-thunk';\nimport {UserState} from '../../state/reducers/userReducers';\nimport {AnyAction} from 'redux';\nimport {CSSTransition, SwitchTransition} from 'react-transition-group';\nimport {AddressType, CheckoutType, OrderStatus, PaymentStatus} from '../../types';\nimport useSWR from 'swr/esm/use-swr';\nimport {\n  deleteCartAction,\n  saveCheckoutAddressAction,\n  saveShippingQuoteAction,\n  setZoomLevelAction,\n} from '../../state/actions';\nimport {useNotify} from '../../hooks';\nimport ServerError from '../../assets/images/vectors/dead.svg';\n\n// const CompleteOrderValidationSchema = Yup.object({\n//   deliveryLocation: Yup.string().required(),\n//   paymentType: Yup.string().required(),\n// });\n\nexport default function Shipping(props) {\n  const api = useAuth();\n\n  const paramOrderId = props.match.params.orderId;\n\n  const userState: UserState = useSelector((state: RootStateOrAny)=> state.user)\n\n  const dispatch: ThunkDispatch<UserState, any, AnyAction> = useDispatch();\n  const userInfoFetcher = ()=> api.accounts.me().then(({data}) => data);\n  const {data: userInfo, error: fetchUserError} = useSWR(userState.isLoggedIn ? 'me': null, userInfoFetcher)\n\n  const orderDataFetcher = (key, orderId) => api.orders.checkStatus(orderId).then(({data})=> data);\n  const {data: orderStatusResult, error: fetchOrderStatusError} = useSWR<{\n    paymentStatus: PaymentStatus,\n    orderStatus: OrderStatus,\n    referenceNo: string\n  }>(userState.isLoggedIn ? [`orders/${paramOrderId}/status`, paramOrderId]: null, orderDataFetcher)\n\n\n  const [payNowOrOnDelivery, setPayNowOrOnDelivery] = useState<\"pay-on-delivery\"|\"pay-now\">(null);\n  // @ts-ignore\n  const [, setCompletedOrder] = useState({});\n  const checkout: CheckoutType = useSelector((state: RootStateOrAny) => state.user.checkout);\n  const [payOnlineOrBuyGoods, setPayOnlineOrBuyGoods] = useState<\"pay-online\"|\"buy-goods\">(null);\n  const [isPayOnlineModalOpen, setPayOnlineModalOpen] = useState(false);\n  const [isFetchQuoteLoading, setIsFetchQuoteLoading] = useState(false);\n\n  const [wardsAndLocalAreas, setWardsAndLocalAreas] = useState<Array<{label: string, value: string}>>([]);\n  const notify = useNotify();\n\n  function flip(value?) {\n    setPayOnlineOrBuyGoods(value)\n  }\n\n  if (!userState.isLoggedIn){\n    return (\n      <Layout>\n        <EmptyState\n          iconWidth={52}\n          icon={GrimacingEmoji}\n          centerAlign={true}\n          title={\"We don't know each other like that.\"}\n          message={\"You need to be logged in to view this page. Please log in to proceed\"}/>\n      </Layout>\n    )\n  }\n\n  if (!orderStatusResult && !fetchUserError && !fetchOrderStatusError) {\n    return <Loading message={'Please wait...'}/>;\n  }\n\n  if (!checkout.items?.length) {\n    console.log(\"Current checkout \")\n    return (\n      <EmptyState\n        title={'Your Cart is Empty'}\n        icon={NormalCart}\n        message={'Do some shopping and try that again.'}\n        prompt={() => (\n          <Button\n            isColor=\"primary\"\n            onClick={() => props.history.push('/')}\n            style={{marginTop: '12px', width: '250px'}}\n          >\n            Start Shopping\n          </Button>\n        )}\n      />\n    );\n  }\n\n  if (!paramOrderId) {\n    return (\n      <EmptyState\n        message={'Invalid order. Please try that again.'}\n        title={'Invalid order'}\n        icon={ErrorIconDark}\n      />\n    )\n  }\n\n  if (fetchOrderStatusError || fetchUserError){\n    return (\n\n      <Layout>\n        <EmptyState\n          icon={ServerError}\n          title={'Sorry about that! An error occurred'}\n          message={()=> (\n            <div>\n              <p>\n                It's not you. It's us.\n              </p>\n              <p>\n                Something went wrong while trying to process your cart.\n                Our best engineers have been notified about it, and are on the case.\n              </p>\n            </div>\n          )}\n          prompt={()=> (\n            <Button\n              style={{width: \"100%\"}}\n              isColor={'primary'}>\n              Try again\n            </Button>\n          )}\n        />\n      </Layout>\n\n    )\n  }\n\n\n  if (orderStatusResult.orderStatus !== 'incomplete'){\n    return (\n      <div>\n        <p>Other status</p>\n      </div>\n    )\n  }\n\n  async function completeOrder(order: {\n    orderId: string,\n    paymentType: 'pay-now' | 'pay-on-delivery',\n    address: AddressType\n  }) {\n    if (!order?.paymentType) {\n      notify.info('Please select a payment method to proceed');\n      return undefined;\n    }\n\n    if (!order?.address){\n      notify.info('Please select a delivery location to proceed');\n      return undefined;\n    }\n\n    try {\n      const {data} = await dispatch(api.orders.complete({\n        address: {\n          latLng: [order.address.lat, order.address.lng]\n        },\n        paymentType: order.paymentType,\n        orderId: order.orderId,\n      }));\n\n      notify.success(data.message);\n      dispatch(deleteCartAction())\n\n      props.history.push(`/checkout/shipping/order-completed/${data.uuid}`)\n\n    }catch (e){\n      const message = extractErrorMessage(e);\n      notify.error(message);\n    }\n\n  }\n\n  async function getDeliveryQuote(address: AddressType){\n    setIsFetchQuoteLoading(true);\n    return await api.deliveries.getQuote({\n      location: {\n        lat: address.lat,\n        long: address.lng,\n        name: address.location,\n      },\n      recipient: {\n        name: `${userInfo.firstName} ${userInfo.lastName}`,\n        phoneNumber: userInfo.phoneNumber,\n      },\n    });\n  }\n\n  function setZoomLevel(level){\n    dispatch(setZoomLevelAction({level}));\n  }\n\n  async function onLocateUser(address: AddressType){\n    saveCheckout(address);\n    // address.lat && address.lng will be null\n    // when the marker is being cleared\n    if (address.lat && address.lng) {\n      try {\n        const {data} = await getDeliveryQuote(address);\n        dispatch(saveShippingQuoteAction(data));\n        setIsFetchQuoteLoading(false);\n      }catch (e){\n        notify.error('Could not get shipping quote')\n      }\n    }else {\n      dispatch(saveShippingQuoteAction({cost: null, courierOrderNo: null}))\n    }\n  }\n\n  function saveCheckout({lat, lng, location, placeId}: AddressType){\n    dispatch(saveCheckoutAddressAction({\n        address: {\n          placeId,\n          location,\n          lat,\n          lng,\n        },\n      }),\n    );\n\n  }\n\n  return (\n    <Layout\n      internal\n      withoutNav\n    >\n      {/*only one child*/}\n      <CompleteOrderRoot>\n        <div>\n          <h2>Complete your order</h2>\n          <h3>Select a location on the map below.</h3>\n          {/*\n            For now, this Formik is basically useless. If we decide\n            to add back the alternative form-filling functionality though,\n            it will be pretty handy.\n          */}\n          <Formik\n            initialValues={{\n              constituency: '',\n              wardOrLocalArea: '',\n              deliveryAddress: '',\n            }}\n/*\n            validate={(values) => {\n              const errors = {\n                deliveryAddress: '',\n                constituency: '',\n                wardOrLocalArea: '',\n              };\n\n              const lat = checkout?.delivery?.address?.lat;\n              const lng = checkout?.delivery?.address?.lng;\n\n              // if the user has not used the map to provide\n              // their location\n              if (!lat || !lng) {\n                // check if they have provided\n                //their constituency, wardOrLocalArea and deliveryAddress\n                if (!values.deliveryAddress) {\n                  errors.deliveryAddress = 'This field is required';\n                }\n                if (!values.constituency) {\n                  errors.constituency = 'This field is required';\n                }\n                if (!values.wardOrLocalArea) {\n                  errors.wardOrLocalArea = 'This field is required';\n                }\n\n                return errors;\n              } else {\n                // if lat & lang are provided, no other fields are needed\n                return {};\n              }\n            }}\n*/\n            onSubmit={async (values, {setSubmitting}) => {\n              setSubmitting(true);\n\n            }}\n          >\n            {() => (\n              <Form>\n                <div>\n                  <div>\n                    <p>\n                      Use the button below to detect your current location, or drag the red marker\n                      to your desired delivery location\n                    </p>\n                    <SimpleMap\n                      initialZoom={checkout?.meta?.zoomLevel}\n                      onZoom={(level => {\n                        setZoomLevel(level);\n                      })}\n                      initialLocation={{\n                        location: checkout?.delivery?.address.location,\n                        value: {\n                          placeId: checkout?.delivery?.address.placeId,\n                          lat: checkout?.delivery?.address?.lat,\n                          lng: checkout?.delivery?.address?.lng,\n                        },\n                      }}\n                      help={`Note: if the marker is not accurate, drag and drop it to your preferred location.`}\n                      onLocateUser={(\n                        [lng, lat],\n                        item,\n                      ) => onLocateUser(\n                        {\n                          lat, lng,\n                          location: item?.location,\n                          placeId: item?.value.placeId,\n                        },\n                      )}/>\n                    {/*<div>\n                      <div>\n                        <div>\n                          <h3>Option 2: Enter your delivery information manually.</h3>\n                          <p>\n                            Fill in the following form if the above map doesn't work,\n                            or if you wish to add any information that will make finding your location easier.\n                          </p>\n                          <p>\n                            Please note:\n                          </p>\n                          <Help>\n                            Tip: If you don't know your constituency, try searching for\n                            your ward or a well-known local area. For example,\n                            searching for \"Fedha\" will bring up\n                            \"Embakasi Central\", searching for\n                            \"Eastleigh\" will bring up \"Kamkunji\" and\n                            \"Karen\" or \"Dam Estate\" will bring up \"Lang'ata\",... etc.\n                          </Help>\n                        </div>\n                        <Columns>\n                          <Column>\n                            <label>Constituency</label>\n                            <SelectField\n                              error={errors.constituency}\n                              onBlur={handleBlur}\n                              isAsync={true}\n                              onChange={(value) => {\n                                if (value) {\n                                  setFieldValue('constituency', value.constituency);\n\n                                  const {wards, local_places} = value;\n                                  const result = [].concat(wards).concat(local_places)\n                                    .map(item => {\n                                      return {\n                                        label: item,\n                                        value: item,\n                                      };\n                                    });\n                                  setWardsAndLocalAreas(result);\n                                } else {\n                                  setFieldValue('constituency', null);\n                                  setWardsAndLocalAreas([]);\n                                }\n                              }}\n                              isClearable={true}\n                              loadOptions={async (inputValue) => {\n                                try {\n\n                                  const {data} = await api.deliveries.getLocations({q: inputValue});\n                                  // don't sort. They're returned\n                                  // sorted according to relevance\n                                  return data;\n                                } catch (e) {\n                                  notify.error('Could not fetch delivery locations.');\n                                }\n                              }}\n                              loadingMessage={'Please wait...'}\n                              getOptionValue={(option) => {\n                                return option.constituency;\n                              }}\n                              getOptionLabel={(option) => {\n                                return option.constituency;\n                              }}\n                              placeholder={'Search for a place'}/>\n                          </Column>\n                          <Column>\n                            <label>Ward/Local area</label>\n                            <SelectField\n                              error={values.constituency ? errors.wardOrLocalArea : null}\n                              isAsync={false}\n                              loadingMessage={'Please wait...'}\n                              // this input is disabled if a constituency has not been selected\n                              disabled={!values.constituency}\n                              isClearable={true}\n                              onChange={(value) => {\n                                setFieldValue('wardOrLocalArea', value);\n                                // todo: once a ward/local area has been selected\n                                //   we should send a request to the server\n                                //   to request the lat and lng of the representative\n                                //   place in order to estimate shipping costs\n                              }}\n                              filterOption={(option, input) => {\n                                return option.value\n                                  ?.toLowerCase()\n                                  .startsWith(input) || option.value\n                                  ?.toLowerCase()\n                                  .includes(input);\n                              }}\n                              options={wardsAndLocalAreas}\n                              placeholder={'Search or select...'}/>\n                          </Column>\n                        </Columns>\n                        <TextField\n                          label={'Street'}\n                          placeholder={\"eg. Lang'ata Road\"}\n                          name={'street'}\n                          type={'text'}/>\n                        <TextField\n                          label={'Delivery address'}\n                          placeholder={'Estate name / Building name / Block no. / Apartment no.'}\n                          name={'deliveryAddress'}\n                          type={'textarea'}/>\n                      </div>\n\n                    </div>*/}\n\n\n                  </div>\n\n                  <hr/>\n                  <div>\n                    <h3>Choose a Payment Option</h3>\n                    <p>Would you like to pay now or, after we've delivered your stuff?</p>\n                    <div className=\"payment-options\">\n                      <div>\n                        <RadioField\n                          name={'payment-method'}\n                          isGroup={true}\n                          inline\n                          bordered\n                          onChange={value => {\n                            setPayNowOrOnDelivery(value);\n                            setCompletedOrder({\n                              payNowOrOnDelivery,\n                            });\n                          }}\n                          options={[\n                            {\n                              value: 'pay-now',\n                              label: 'Pay now',\n                            },\n                            {\n                              value: 'pay-on-delivery',\n                              label: 'Pay on Delivery',\n                            },\n                          ]}\n                        />\n                      </div>\n                    </div>\n\n                    <hr/>\n                    <div>\n                      <div>\n                        <h3>Confirm your order</h3>\n                      </div>\n                      <SwitchTransition mode={'out-in'}>\n                        <CSSTransition\n                          timeout={250}\n                          key={payNowOrOnDelivery}\n                          classNames=\"fade\"\n                        >\n                          <div>\n                            {\n                              !payNowOrOnDelivery &&\n                              <p>\n                                Select a payment method {' '}\n                                <img\n                                  src={IndexFinger}\n                                  alt={'finger pointing up emoji'}\n                                  style={{width: 16}}\n                                />{' '}\n                                to confirm your order\n                              </p>\n                            }\n                            {\n                              payNowOrOnDelivery === 'pay-now' && (\n                                <div>\n                                  <SwitchTransition mode={'out-in'}>\n                                    <CSSTransition\n                                      timeout={250}\n                                      key={payOnlineOrBuyGoods}\n                                      classNames=\"fade\"\n                                    >\n                                      <div>\n                                        <div className={'pay-online'}>\n                                          <div\n                                            className={'header'}\n                                            onClick={() => flip('pay-online')}\n                                          >\n                                            <div>\n                                              <h4>Option 1: Pay Online</h4>\n                                              <p>Receive a prompt on your phone and enter your M-Pesa PIN.</p>\n                                            </div>\n                                            <ChevronRight\n                                              style={{\n                                                transform: payOnlineOrBuyGoods === 'pay-online' ? 'rotate(90deg)' : '0',\n                                              }}\n                                              className={'chevron'}/>\n                                          </div>\n                                          <div>\n                                            {payOnlineOrBuyGoods === 'pay-online' && (\n                                              <div className={'pay-online'}>\n                                                <Button\n                                                  isColor=\"primary\"\n                                                  onClick={() => setPayOnlineModalOpen(true)}\n                                                >\n                                                  Pay with &nbsp;\n                                                  <img\n                                                    style={{width: 80}}\n                                                    alt={'mpesa logo'}\n                                                    src={MpesaLogo}\n                                                  />{' '}\n                                                  &nbsp; Online\n                                                </Button>\n                                                <div className={'steps'}>\n                                                  <h4>Steps</h4>\n                                                  <ol>\n                                                    <li>\n                                                      You will automatically receive a prompt at your phone number:\n                                                      <b> +254-{addDashes(userInfo?.phoneNumber)}</b>&nbsp;\n                                                    </li>\n                                                    <li>\n                                                      Enter your PIN number to confirm payment of the requested\n                                                      amount.\n                                                    </li>\n                                                    <li>\n                                                      <b>Your order will be confirmed immediately</b> after the\n                                                      payment is received.\n                                                    </li>\n                                                    <li>\n                                                      Sit back and relax.\n                                                      <img\n                                                        src={PeaceSign}\n                                                        style={{width: 16}}\n                                                        alt={'peace'}\n                                                      />{' '}\n                                                      We'll take care of the rest.\n                                                    </li>\n                                                  </ol>\n                                                </div>\n                                              </div>\n                                            )}\n                                          </div>\n\n                                        </div>\n\n                                        <hr/>\n\n                                        <div className={'buy-goods'}>\n                                          <div\n                                            className={'header'}\n                                            onClick={() => flip('buy-goods')}\n                                          >\n                                            <div>\n                                              <h4>Option 2: Buy Goods Till Number</h4>\n                                              <p>Enter the till number yourself</p>\n                                            </div>\n                                            <ChevronRight\n                                              style={{\n                                                transform: payOnlineOrBuyGoods === 'buy-goods' ? 'rotate(90deg)' : '0',\n                                              }}\n                                              className={'chevron'}/>\n                                          </div>\n                                          <SwitchTransition mode={'out-in'}>\n                                            <CSSTransition\n                                              timeout={250}\n                                              key={payOnlineOrBuyGoods}\n                                              classNames=\"fade\"\n                                            >\n                                              <div>\n                                                {payOnlineOrBuyGoods === 'buy-goods' && (\n                                                  <div className={'lipa-na-mpesa'}>\n                                                    <img\n                                                      title=\"mpesa\"\n                                                      src={LipaNaMpesa}\n                                                      alt=\"mpesa logo\"\n                                                      style={{display: 'block', margin: '0 auto'}}\n                                                    />\n\n                                                    <div\n                                                      style={{\n                                                        textAlign: 'center',\n                                                      }}\n                                                    >\n                                                      <h2\n                                                        style={{\n                                                          color: 'white',\n                                                        }}\n                                                      >\n                                                        Buy Goods Till Number\n                                                      </h2>\n                                                      <div className={'boxes'}>\n                                                        <div>\n                                                          <div>5</div>\n                                                        </div>\n                                                        <div>\n                                                          <div>6</div>\n                                                        </div>\n                                                        <div>\n                                                          <div>7</div>\n                                                        </div>\n                                                        <div>\n                                                          <div>8</div>\n                                                        </div>\n                                                        <div>\n                                                          <div>5</div>\n                                                        </div>\n                                                        <div>\n                                                          <div>1</div>\n                                                        </div>\n                                                        <div>\n                                                          <div>1</div>\n                                                        </div>\n                                                      </div>\n                                                      <div>\n                                                        <h3\n                                                          style={{\n                                                            color: 'white',\n                                                            marginTop: 0,\n                                                          }}\n                                                        >\n                                                          RETROBIE LTD\n                                                        </h3>\n                                                      </div>\n                                                    </div>\n\n                                                    <div className={'steps'}>\n                                                      <h4>Steps</h4>\n                                                      <div>\n                                                        <ol>\n                                                          <li>Open the M-Pesa app</li>\n                                                          <li>\n                                                            Tap on <b>Lipa Na M-Pesa</b>\n                                                          </li>\n                                                          <li>\n                                                            Tap on <b>Buy Goods and Services</b>\n                                                          </li>\n                                                          <li>\n                                                            Enter the till number above.\n                                                            <img\n                                                              src={IndexFinger}\n                                                              alt={'finger pointing up emoji'}\n                                                              style={{width: 16}}\n                                                            />\n                                                          </li>\n                                                          <li>Enter your M-Pesa PIN</li>\n                                                          <li>\n                                                            Click the button below to\n                                                            complete your order.\n                                                            <img\n                                                              src={PointingDown}\n                                                              style={{\n                                                                width: 16,\n                                                                verticalAlign: 'middle',\n                                                              }}\n                                                              alt={'peace'}\n                                                            />{' '}\n                                                            We'll let you know (via email) when\n                                                            the payment comes through.\n                                                          </li>\n                                                        </ol>\n                                                      </div>\n                                                    </div>\n                                                  </div>\n                                                )}\n                                              </div>\n                                            </CSSTransition>\n                                          </SwitchTransition>\n                                          <hr/>\n                                        </div>\n                                      </div>\n                                    </CSSTransition>\n                                  </SwitchTransition>\n\n                                </div>\n                              )}\n\n                            {\n                              payNowOrOnDelivery === 'pay-on-delivery' && (\n                                <div>\n                                  <p>\n                                    Click on the button below\n                                    <img\n                                      src={PointingDown}\n                                      style={{\n                                        width: 16,\n                                        verticalAlign: 'middle',\n                                      }}\n                                      alt={'emoji pointing down'}\n                                    />{' '}\n                                    to complete your order. <b>We'll call you</b> to confirm the delivery\n                                    details.\n                                  </p>\n                                </div>\n                              )}\n                          </div>\n\n                        </CSSTransition>\n                      </SwitchTransition>\n\n                    </div>\n                    <Totals>\n                      <div>\n                        <h3>The maths</h3>\n                      </div>\n                      <div style={{\n                        display: 'grid',\n                        gridTemplateColumns: '1fr auto',\n                      }}>\n                        <div>\n                          <p>Checkout</p>\n                          <p>Shipping</p>\n                        </div>\n                        <div>\n                          <p>\n                            <b>\n                              Ksh. {formatNumberWithCommas(checkout.total)}\n                            </b>\n                          </p>\n                          {\n                            checkout.delivery?.cost ? (\n                              <div style={{display: 'flex', justifyContent: 'space-between'}}>\n                                <span>\n                                  <b>\n                                    Ksh.\n                                  </b>\n                                </span>\n                                &nbsp;\n                                <span>\n                                    <b>\n                                      {formatNumberWithCommas(checkout.delivery?.cost)}\n                                    </b>\n                                </span>\n                              </div>\n                            ) : isFetchQuoteLoading ? (\n                              <p>Please wait...</p>\n                            ) : (\n                              <p>\n                                Not yet calculated\n                              </p>\n                            )\n                          }\n                        </div>\n                      </div>\n                      <div className={'subtotal'}>\n                        <h4>Total</h4>\n                        <h3>Ksh.{' '}\n                          {\n                            checkout.delivery?.cost ?\n                              formatNumberWithCommas(checkout.total + checkout.delivery?.cost) :\n                              formatNumberWithCommas(checkout.total)\n                          }\n                        </h3>\n                      </div>\n                    </Totals>\n                  </div>\n\n                  <div id={'footer'}>\n                    {\n                      payNowOrOnDelivery === \"pay-on-delivery\" ||\n                        payOnlineOrBuyGoods === \"buy-goods\" ?\n                        (\n                          <div style={{\n                            display: 'flex',\n                            justifyContent: 'center',\n                            marginTop: 24,\n                          }}>\n                            <Button\n                              isColor=\"primary\"\n                              onClick={async () => await completeOrder({\n                                orderId: paramOrderId,\n                                paymentType: payNowOrOnDelivery,\n                                address: checkout.delivery?.address\n                              })}\n                              style={{width: '100%', fontWeight: 'bold'}}\n                            >\n                              Complete your order\n                            </Button>\n                          </div>\n                        )\n                        : <span/>\n                    }\n                  </div>\n                </div>\n              </Form>\n            )}\n          </Formik>\n        </div>\n\n        <PayWithMpesaOnlineModal\n          isActive={isPayOnlineModalOpen}\n          onClose={() => setPayOnlineModalOpen(false)}\n          meta={{\n            orderId: paramOrderId,\n            phoneNumber: userInfo?.phoneNumber,\n            referenceNo: orderStatusResult.referenceNo,\n            paymentStatus: orderStatusResult.paymentStatus\n          }}\n          onPaymentInitiated={()=> {}}\n        />\n      </CompleteOrderRoot>\n    </Layout>\n  );\n}\n\nconst Totals = styled.div`\n\n  .subtotal {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n`\n\nconst CompleteOrderRoot = styled.div`\n  display: grid;\n  justify-content: center;\n  margin-top: 24px;\n\n  & > div {\n    max-width: 650px;\n    padding: 0 24px;\n\n    @media screen and (max-width: 360px) {\n      padding: 0 18px;\n    }\n  }\n\n  .pay-online,\n  .buy-goods {\n    .steps {\n      margin: 0 auto;\n      line-height: 24px;\n    }\n\n    .chevron {\n      transition: all ease-in-out 0.25s;\n    }\n\n    .header {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      transition: all ease-in-out 0.25s;\n      margin-bottom: 24px;\n      justify-content: space-between;\n      \n      h4,\n      p {\n        margin: 0;\n        margin-bottom: 6px;\n        transition: all ease-in-out 0.25s;\n      }\n\n      &:hover {\n        cursor: pointer;\n        \n        h4,\n        p {\n          color: var(--color-primary);\n        }\n      }\n    }\n  }\n\n  .lipa-na-mpesa {\n    padding: 24px;\n    border-radius: 2px;\n    background: #66ad45;\n    h4 {\n      margin: 0;\n    }\n\n    li,\n    b,\n    h4 {\n      color: #fff;\n    }\n  }\n\n  .boxes {\n    display: flex;\n    justify-content: center;\n    margin: 24px 0;\n    gap: 8px;\n\n    & > div {\n      border-radius: 2px;\n      // we use a hack to make sure\n      // this div is always 'square'\n      height: 0;\n      padding-top: 5%;\n      padding-bottom: 12%;\n      font-size: 32px;\n      width: 25%;\n      background: white;\n      font-weight: bold;\n      flex-basis: 70px;\n\n      @media screen and (max-width: 460px) {\n        padding-bottom: 18%;\n      }\n    }\n  }\n\n  .payment-options {\n    display: flex;\n\n    .payment--parent {\n      margin-right: 8px;\n      border: 1px solid lightgray;\n      padding: 4px 12px;\n      display: flex;\n      align-items: center;\n      border-radius: 4px;\n      transition: all 0.25s ease-in-out;\n\n      &:hover {\n        cursor: pointer;\n        border-color: #7a7a7a;\n      }\n\n      .radio {\n        margin-right: 8px;\n      }\n    }\n\n    img {\n      max-width: 120px;\n      object-fit: contain;\n      border-radius: 4px;\n      padding: 0 12px;\n      transition: all 0.25s ease-in-out;\n\n      &:hover {\n        cursor: pointer;\n      }\n    }\n  }\n`;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/pages/shipping/index.tsx	(revision 3f5b73eaf674f98b2497033395c988efc81f3c97)
+++ src/pages/shipping/index.tsx	(date 1616757159464)
@@ -458,6 +458,7 @@
                           inline
                           bordered
                           onChange={value => {
+                            // @ts-ignore
                             setPayNowOrOnDelivery(value);
                             setCompletedOrder({
                               payNowOrOnDelivery,
